[
    // fix double quotes in Rnw
    { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"${0:$SELECTION}\""}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.tex.latex.rsweave source.r" }
        ]
    },
    // fix single quotes in Rnw
    { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'${0:$SELECTION}'"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "text.tex.latex.rsweave source.r" }
        ]
    },

    // Roxygen
    { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'"}, "context":
        [
            { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\s*#\\s*$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "source.r" }
        ]
    },

    // comment indentation
    { "keys": ["enter"], "command": "insert", "args": {"characters": "\n#' "}, "context":
        [
            { "key": "preceding_text", "operator": "regex_contains", "operand": "#'.*$", "match_all": true },
            { "key": "selection_empty", "match_all": true, "operand": true, "operator": "equal"},
            { "key": "selector", "operator": "equal", "operand": "source.r comment.line.roxygen.r" }
        ]
    },

    // insert lines between parantheses
    { "keys": ["enter"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Add Line in Braces.sublime-macro"}, "context":
        [
            { "key": "setting.auto_indent", "operator": "equal", "operand": true },
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "source.r" }
        ]
    },

    // source prompt
    { "keys": ["\""], "command": "ride_source_prompt", "context":
        [
            { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "(?:source|sourceCpp)\\($", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^(?:'|\"|\\)| |$)", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true },
            { "key": "selector", "operator": "equal", "operand": "source.r" }
        ]
    }
]
