{
	"objects" : [
		"abbreviate",
		"abs",
		"acos",
		"acosh",
		"addNA",
		"addTaskCallback",
		"agrep",
		"agrepl",
		"alist",
		"all",
		"all.equal",
		"all.equal.character",
		"all.equal.default",
		"all.equal.environment",
		"all.equal.envRefClass",
		"all.equal.factor",
		"all.equal.formula",
		"all.equal.language",
		"all.equal.list",
		"all.equal.numeric",
		"all.equal.POSIXt",
		"all.equal.raw",
		"all.names",
		"all.vars",
		"any",
		"anyDuplicated",
		"anyDuplicated.array",
		"anyDuplicated.data.frame",
		"anyDuplicated.default",
		"anyDuplicated.matrix",
		"anyNA",
		"anyNA.numeric_version",
		"anyNA.POSIXlt",
		"aperm",
		"aperm.default",
		"aperm.table",
		"append",
		"apply",
		"Arg",
		"args",
		"array",
		"arrayInd",
		"as.array",
		"as.array.default",
		"as.call",
		"as.character",
		"as.character.condition",
		"as.character.Date",
		"as.character.default",
		"as.character.error",
		"as.character.factor",
		"as.character.hexmode",
		"as.character.numeric_version",
		"as.character.octmode",
		"as.character.POSIXt",
		"as.character.srcref",
		"as.complex",
		"as.data.frame",
		"as.data.frame.array",
		"as.data.frame.AsIs",
		"as.data.frame.character",
		"as.data.frame.complex",
		"as.data.frame.data.frame",
		"as.data.frame.Date",
		"as.data.frame.default",
		"as.data.frame.difftime",
		"as.data.frame.factor",
		"as.data.frame.integer",
		"as.data.frame.list",
		"as.data.frame.logical",
		"as.data.frame.matrix",
		"as.data.frame.model.matrix",
		"as.data.frame.noquote",
		"as.data.frame.numeric",
		"as.data.frame.numeric_version",
		"as.data.frame.ordered",
		"as.data.frame.POSIXct",
		"as.data.frame.POSIXlt",
		"as.data.frame.raw",
		"as.data.frame.table",
		"as.data.frame.ts",
		"as.data.frame.vector",
		"as.Date",
		"as.Date.character",
		"as.Date.date",
		"as.Date.dates",
		"as.Date.default",
		"as.Date.factor",
		"as.Date.numeric",
		"as.Date.POSIXct",
		"as.Date.POSIXlt",
		"as.difftime",
		"as.double",
		"as.double.difftime",
		"as.double.POSIXlt",
		"as.environment",
		"as.expression",
		"as.expression.default",
		"as.factor",
		"as.function",
		"as.function.default",
		"as.hexmode",
		"as.integer",
		"as.list",
		"as.list.data.frame",
		"as.list.Date",
		"as.list.default",
		"as.list.environment",
		"as.list.factor",
		"as.list.function",
		"as.list.numeric_version",
		"as.list.POSIXct",
		"as.logical",
		"as.logical.factor",
		"as.matrix",
		"as.matrix.data.frame",
		"as.matrix.default",
		"as.matrix.noquote",
		"as.matrix.POSIXlt",
		"as.name",
		"as.null",
		"as.null.default",
		"as.numeric",
		"as.numeric_version",
		"as.octmode",
		"as.ordered",
		"as.package_version",
		"as.pairlist",
		"as.POSIXct",
		"as.POSIXct.date",
		"as.POSIXct.Date",
		"as.POSIXct.dates",
		"as.POSIXct.default",
		"as.POSIXct.numeric",
		"as.POSIXct.POSIXlt",
		"as.POSIXlt",
		"as.POSIXlt.character",
		"as.POSIXlt.date",
		"as.POSIXlt.Date",
		"as.POSIXlt.dates",
		"as.POSIXlt.default",
		"as.POSIXlt.factor",
		"as.POSIXlt.numeric",
		"as.POSIXlt.POSIXct",
		"as.qr",
		"as.raw",
		"as.single",
		"as.single.default",
		"as.symbol",
		"as.table",
		"as.table.default",
		"as.vector",
		"as.vector.factor",
		"asin",
		"asinh",
		"asNamespace",
		"asS3",
		"asS4",
		"assign",
		"atan",
		"atan2",
		"atanh",
		"attach",
		"attachNamespace",
		"attr",
		"attr.all.equal",
		"attributes",
		"autoload",
		"autoloader",
		"backsolve",
		"baseenv",
		"basename",
		"besselI",
		"besselJ",
		"besselK",
		"besselY",
		"beta",
		"bindingIsActive",
		"bindingIsLocked",
		"bindtextdomain",
		"bitwAnd",
		"bitwNot",
		"bitwOr",
		"bitwShiftL",
		"bitwShiftR",
		"bitwXor",
		"body",
		"bquote",
		"break",
		"browser",
		"browserCondition",
		"browserSetDebug",
		"browserText",
		"builtins",
		"by",
		"by.data.frame",
		"by.default",
		"bzfile",
		"c.Date",
		"c.difftime",
		"c.noquote",
		"c.numeric_version",
		"c.POSIXct",
		"c.POSIXlt",
		"c.warnings",
		"call",
		"callCC",
		"capabilities",
		"casefold",
		"cat",
		"cbind",
		"cbind.data.frame",
		"ceiling",
		"char.expand",
		"character",
		"charmatch",
		"charToRaw",
		"chartr",
		"check_tzones",
		"chkDots",
		"chol",
		"chol.default",
		"chol2inv",
		"choose",
		"class",
		"clearPushBack",
		"close",
		"close.connection",
		"close.srcfile",
		"close.srcfilealias",
		"closeAllConnections",
		"col",
		"colMeans",
		"colnames",
		"colSums",
		"commandArgs",
		"comment",
		"complex",
		"computeRestarts",
		"conditionCall",
		"conditionCall.condition",
		"conditionMessage",
		"conditionMessage.condition",
		"conflicts",
		"Conj",
		"contributors",
		"cos",
		"cosh",
		"cospi",
		"crossprod",
		"Cstack_info",
		"cummax",
		"cummin",
		"cumprod",
		"cumsum",
		"curlGetHeaders",
		"cut",
		"cut.Date",
		"cut.default",
		"cut.POSIXt",
		"data.class",
		"data.frame",
		"data.matrix",
		"date",
		"debug",
		"debuggingState",
		"debugonce",
		"default.stringsAsFactors",
		"delayedAssign",
		"deparse",
		"det",
		"detach",
		"determinant",
		"determinant.matrix",
		"dget",
		"diag",
		"diff",
		"diff.Date",
		"diff.default",
		"diff.difftime",
		"diff.POSIXt",
		"difftime",
		"digamma",
		"dim",
		"dim.data.frame",
		"dimnames",
		"dimnames.data.frame",
		"dir",
		"dir.create",
		"dir.exists",
		"dirname",
		"do.call",
		"dontCheck",
		"double",
		"dput",
		"dQuote",
		"drop",
		"droplevels",
		"droplevels.data.frame",
		"droplevels.factor",
		"dump",
		"duplicated",
		"duplicated.array",
		"duplicated.data.frame",
		"duplicated.default",
		"duplicated.matrix",
		"duplicated.numeric_version",
		"duplicated.POSIXlt",
		"dyn.load",
		"dyn.unload",
		"dynGet",
		"eapply",
		"eigen",
		"emptyenv",
		"enc2native",
		"enc2utf8",
		"encodeString",
		"Encoding",
		"endsWith",
		"enquote",
		"env.profile",
		"environment",
		"environmentIsLocked",
		"environmentName",
		"eval",
		"eval.parent",
		"evalq",
		"exists",
		"exp",
		"expand.grid",
		"expm1",
		"expression",
		"extSoftVersion",
		"factor",
		"factorial",
		"fifo",
		"file",
		"file.access",
		"file.append",
		"file.choose",
		"file.copy",
		"file.create",
		"file.exists",
		"file.info",
		"file.link",
		"file.mode",
		"file.mtime",
		"file.path",
		"file.remove",
		"file.rename",
		"file.show",
		"file.size",
		"file.symlink",
		"Filter",
		"Find",
		"find.package",
		"findInterval",
		"findPackageEnv",
		"findRestart",
		"floor",
		"flush",
		"flush.connection",
		"for",
		"force",
		"forceAndCall",
		"formals",
		"format",
		"format.AsIs",
		"format.data.frame",
		"format.Date",
		"format.default",
		"format.difftime",
		"format.factor",
		"format.hexmode",
		"format.info",
		"format.libraryIQR",
		"format.numeric_version",
		"format.octmode",
		"format.packageInfo",
		"format.POSIXct",
		"format.POSIXlt",
		"format.pval",
		"format.summaryDefault",
		"formatC",
		"formatDL",
		"forwardsolve",
		"function",
		"gamma",
		"gc",
		"gc.time",
		"gcinfo",
		"gctorture",
		"gctorture2",
		"get",
		"get0",
		"getAllConnections",
		"getCallingDLL",
		"getCallingDLLe",
		"getConnection",
		"getDLLRegisteredRoutines",
		"getDLLRegisteredRoutines.character",
		"getDLLRegisteredRoutines.DLLInfo",
		"getElement",
		"geterrmessage",
		"getExportedValue",
		"getHook",
		"getLoadedDLLs",
		"getNamespace",
		"getNamespaceExports",
		"getNamespaceImports",
		"getNamespaceInfo",
		"getNamespaceName",
		"getNamespaceUsers",
		"getNamespaceVersion",
		"getNativeSymbolInfo",
		"getOption",
		"getRversion",
		"getSrcLines",
		"getTaskCallbackNames",
		"gettext",
		"gettextf",
		"getwd",
		"gl",
		"globalenv",
		"gregexpr",
		"grep",
		"grepl",
		"grepRaw",
		"grouping",
		"gsub",
		"gzcon",
		"gzfile",
		"iconv",
		"iconvlist",
		"icuGetCollate",
		"icuSetCollate",
		"identical",
		"identity",
		"if",
		"ifelse",
		"Im",
		"importIntoEnv",
		"inherits",
		"integer",
		"interaction",
		"interactive",
		"intersect",
		"intToBits",
		"intToUtf8",
		"inverse.rle",
		"invisible",
		"invokeRestart",
		"invokeRestartInteractively",
		"is.array",
		"is.atomic",
		"is.call",
		"is.character",
		"is.complex",
		"is.data.frame",
		"is.double",
		"is.element",
		"is.environment",
		"is.expression",
		"is.factor",
		"is.finite",
		"is.function",
		"is.infinite",
		"is.integer",
		"is.language",
		"is.list",
		"is.loaded",
		"is.logical",
		"is.matrix",
		"is.na",
		"is.na.data.frame",
		"is.na.numeric_version",
		"is.na.POSIXlt",
		"is.name",
		"is.nan",
		"is.null",
		"is.numeric",
		"is.numeric_version",
		"is.numeric.Date",
		"is.numeric.difftime",
		"is.numeric.POSIXt",
		"is.object",
		"is.ordered",
		"is.package_version",
		"is.pairlist",
		"is.primitive",
		"is.qr",
		"is.R",
		"is.raw",
		"is.recursive",
		"is.single",
		"is.symbol",
		"is.table",
		"is.unsorted",
		"is.vector",
		"isatty",
		"isBaseNamespace",
		"isdebugged",
		"isIncomplete",
		"isNamespace",
		"isNamespaceLoaded",
		"ISOdate",
		"ISOdatetime",
		"isOpen",
		"isRestart",
		"isS4",
		"isSeekable",
		"isSymmetric",
		"isSymmetric.matrix",
		"isTRUE",
		"jitter",
		"julian",
		"julian.Date",
		"julian.POSIXt",
		"kappa",
		"kappa.default",
		"kappa.lm",
		"kappa.qr",
		"kronecker",
		"l10n_info",
		"La_version",
		"La.svd",
		"labels",
		"labels.default",
		"lapply",
		"last.warning",
		"lazyLoad",
		"lazyLoadDBexec",
		"lazyLoadDBfetch",
		"lbeta",
		"lchoose",
		"length",
		"length.POSIXlt",
		"lengths",
		"letters",
		"LETTERS",
		"levels",
		"levels.default",
		"lfactorial",
		"lgamma",
		"libcurlVersion",
		"library",
		"library.dynam",
		"library.dynam.unload",
		"licence",
		"license",
		"list",
		"list.dirs",
		"list.files",
		"list2env",
		"load",
		"loadedNamespaces",
		"loadingNamespaceInfo",
		"loadNamespace",
		"local",
		"lockBinding",
		"lockEnvironment",
		"log",
		"log10",
		"log1p",
		"log2",
		"logb",
		"logical",
		"lower.tri",
		"ls",
		"make.names",
		"make.unique",
		"makeActiveBinding",
		"Map",
		"mapply",
		"margin.table",
		"mat.or.vec",
		"match",
		"match.arg",
		"match.call",
		"match.fun",
		"Math.data.frame",
		"Math.Date",
		"Math.difftime",
		"Math.factor",
		"Math.POSIXt",
		"matrix",
		"max",
		"max.col",
		"mean",
		"mean.Date",
		"mean.default",
		"mean.difftime",
		"mean.POSIXct",
		"mean.POSIXlt",
		"mem.limits",
		"memCompress",
		"memDecompress",
		"memory.profile",
		"merge",
		"merge.data.frame",
		"merge.default",
		"message",
		"mget",
		"min",
		"missing",
		"Mod",
		"mode",
		"month.abb",
		"month.name",
		"months",
		"months.Date",
		"months.POSIXt",
		"names",
		"names.POSIXlt",
		"namespaceExport",
		"namespaceImport",
		"namespaceImportClasses",
		"namespaceImportFrom",
		"namespaceImportMethods",
		"nargs",
		"nchar",
		"ncol",
		"NCOL",
		"Negate",
		"new.env",
		"next",
		"NextMethod",
		"ngettext",
		"nlevels",
		"noquote",
		"norm",
		"normalizePath",
		"nrow",
		"NROW",
		"numeric",
		"numeric_version",
		"nzchar",
		"objects",
		"oldClass",
		"OlsonNames",
		"on.exit",
		"open",
		"open.connection",
		"open.srcfile",
		"open.srcfilealias",
		"open.srcfilecopy",
		"Ops.data.frame",
		"Ops.Date",
		"Ops.difftime",
		"Ops.factor",
		"Ops.numeric_version",
		"Ops.ordered",
		"Ops.POSIXt",
		"options",
		"order",
		"ordered",
		"outer",
		"package_version",
		"packageEvent",
		"packageHasNamespace",
		"packageStartupMessage",
		"packBits",
		"pairlist",
		"parent.env",
		"parent.frame",
		"parse",
		"parseNamespaceFile",
		"paste",
		"paste0",
		"path.expand",
		"path.package",
		"pcre_config",
		"pi",
		"pipe",
		"pmatch",
		"pmax",
		"pmax.int",
		"pmin",
		"pmin.int",
		"polyroot",
		"pos.to.env",
		"Position",
		"pretty",
		"pretty.default",
		"prettyNum",
		"print",
		"print.AsIs",
		"print.by",
		"print.condition",
		"print.connection",
		"print.data.frame",
		"print.Date",
		"print.default",
		"print.difftime",
		"print.Dlist",
		"print.DLLInfo",
		"print.DLLInfoList",
		"print.DLLRegisteredRoutines",
		"print.factor",
		"print.function",
		"print.hexmode",
		"print.libraryIQR",
		"print.listof",
		"print.NativeRoutineList",
		"print.noquote",
		"print.numeric_version",
		"print.octmode",
		"print.packageInfo",
		"print.POSIXct",
		"print.POSIXlt",
		"print.proc_time",
		"print.restart",
		"print.rle",
		"print.simple.list",
		"print.srcfile",
		"print.srcref",
		"print.summary.table",
		"print.summaryDefault",
		"print.table",
		"print.warnings",
		"prmatrix",
		"proc.time",
		"prod",
		"prop.table",
		"provideDimnames",
		"psigamma",
		"pushBack",
		"pushBackLength",
		"qr",
		"qr.coef",
		"qr.default",
		"qr.fitted",
		"qr.Q",
		"qr.qty",
		"qr.qy",
		"qr.R",
		"qr.resid",
		"qr.solve",
		"qr.X",
		"quarters",
		"quarters.Date",
		"quarters.POSIXt",
		"quit",
		"quote",
		"R_system_version",
		"R.home",
		"R.version",
		"R.Version",
		"R.version.string",
		"range",
		"range.default",
		"rank",
		"rapply",
		"raw",
		"rawConnection",
		"rawConnectionValue",
		"rawShift",
		"rawToBits",
		"rawToChar",
		"rbind",
		"rbind.data.frame",
		"rcond",
		"Re",
		"read.dcf",
		"readBin",
		"readChar",
		"readline",
		"readLines",
		"readRDS",
		"readRenviron",
		"Recall",
		"Reduce",
		"reg.finalizer",
		"regexec",
		"regexpr",
		"registerS3method",
		"registerS3methods",
		"regmatches",
		"remove",
		"removeTaskCallback",
		"rep",
		"rep_len",
		"rep.Date",
		"rep.factor",
		"rep.int",
		"rep.numeric_version",
		"rep.POSIXct",
		"rep.POSIXlt",
		"repeat",
		"replace",
		"replicate",
		"require",
		"requireNamespace",
		"restartDescription",
		"restartFormals",
		"retracemem",
		"return",
		"returnValue",
		"rev",
		"rev.default",
		"rle",
		"rm",
		"RNGkind",
		"RNGversion",
		"round",
		"round.Date",
		"round.POSIXt",
		"row",
		"row.names",
		"row.names.data.frame",
		"row.names.default",
		"rowMeans",
		"rownames",
		"rowsum",
		"rowsum.data.frame",
		"rowsum.default",
		"rowSums",
		"sample",
		"sample.int",
		"sapply",
		"save",
		"save.image",
		"saveRDS",
		"scale",
		"scale.default",
		"scan",
		"search",
		"searchpaths",
		"seek",
		"seek.connection",
		"seq",
		"seq_along",
		"seq_len",
		"seq.Date",
		"seq.default",
		"seq.int",
		"seq.POSIXt",
		"sequence",
		"serialize",
		"set.seed",
		"setdiff",
		"setequal",
		"setHook",
		"setNamespaceInfo",
		"setSessionTimeLimit",
		"setTimeLimit",
		"setwd",
		"showConnections",
		"shQuote",
		"sign",
		"signalCondition",
		"signif",
		"simpleCondition",
		"simpleError",
		"simpleMessage",
		"simpleWarning",
		"simplify2array",
		"sin",
		"single",
		"sinh",
		"sink",
		"sink.number",
		"sinpi",
		"slice.index",
		"socketConnection",
		"socketSelect",
		"solve",
		"solve.default",
		"solve.qr",
		"sort",
		"sort.default",
		"sort.int",
		"sort.list",
		"sort.POSIXlt",
		"source",
		"split",
		"split.data.frame",
		"split.Date",
		"split.default",
		"split.POSIXct",
		"sprintf",
		"sqrt",
		"sQuote",
		"srcfile",
		"srcfilealias",
		"srcfilecopy",
		"srcref",
		"standardGeneric",
		"startsWith",
		"stderr",
		"stdin",
		"stdout",
		"stop",
		"stopifnot",
		"storage.mode",
		"strftime",
		"strptime",
		"strrep",
		"strsplit",
		"strtoi",
		"strtrim",
		"structure",
		"strwrap",
		"sub",
		"subset",
		"subset.data.frame",
		"subset.default",
		"subset.matrix",
		"substitute",
		"substr",
		"substring",
		"sum",
		"summary",
		"summary.connection",
		"summary.data.frame",
		"Summary.data.frame",
		"summary.Date",
		"Summary.Date",
		"summary.default",
		"Summary.difftime",
		"summary.factor",
		"Summary.factor",
		"summary.matrix",
		"Summary.numeric_version",
		"Summary.ordered",
		"summary.POSIXct",
		"Summary.POSIXct",
		"summary.POSIXlt",
		"Summary.POSIXlt",
		"summary.proc_time",
		"summary.srcfile",
		"summary.srcref",
		"summary.table",
		"suppressMessages",
		"suppressPackageStartupMessages",
		"suppressWarnings",
		"svd",
		"sweep",
		"switch",
		"sys.call",
		"sys.calls",
		"Sys.chmod",
		"Sys.Date",
		"sys.frame",
		"sys.frames",
		"sys.function",
		"Sys.getenv",
		"Sys.getlocale",
		"Sys.getpid",
		"Sys.glob",
		"Sys.info",
		"sys.load.image",
		"Sys.localeconv",
		"sys.nframe",
		"sys.on.exit",
		"sys.parent",
		"sys.parents",
		"Sys.readlink",
		"sys.save.image",
		"Sys.setenv",
		"Sys.setFileTime",
		"Sys.setlocale",
		"Sys.sleep",
		"sys.source",
		"sys.status",
		"Sys.time",
		"Sys.timezone",
		"Sys.umask",
		"Sys.unsetenv",
		"Sys.which",
		"system",
		"system.file",
		"system.time",
		"system2",
		"t.data.frame",
		"t.default",
		"table",
		"tabulate",
		"tan",
		"tanh",
		"tanpi",
		"tapply",
		"taskCallbackManager",
		"tcrossprod",
		"tempdir",
		"tempfile",
		"testPlatformEquivalence",
		"textConnection",
		"textConnectionValue",
		"tolower",
		"topenv",
		"toString",
		"toString.default",
		"toupper",
		"trace",
		"traceback",
		"tracemem",
		"tracingState",
		"transform",
		"transform.data.frame",
		"transform.default",
		"trigamma",
		"trimws",
		"trunc",
		"trunc.Date",
		"trunc.POSIXt",
		"truncate",
		"truncate.connection",
		"try",
		"tryCatch",
		"typeof",
		"unclass",
		"undebug",
		"union",
		"unique",
		"unique.array",
		"unique.data.frame",
		"unique.default",
		"unique.matrix",
		"unique.numeric_version",
		"unique.POSIXlt",
		"unique.warnings",
		"units",
		"units.difftime",
		"unix.time",
		"unlink",
		"unlist",
		"unloadNamespace",
		"unlockBinding",
		"unname",
		"unserialize",
		"unsplit",
		"untrace",
		"untracemem",
		"unz",
		"upper.tri",
		"url",
		"UseMethod",
		"utf8ToInt",
		"validEnc",
		"validUTF8",
		"vapply",
		"vector",
		"Vectorize",
		"version",
		"warning",
		"warnings",
		"weekdays",
		"weekdays.Date",
		"weekdays.POSIXt",
		"which",
		"which.max",
		"which.min",
		"while",
		"with",
		"with.default",
		"withCallingHandlers",
		"within",
		"within.data.frame",
		"within.list",
		"withRestarts",
		"withVisible",
		"write",
		"write.dcf",
		"writeBin",
		"writeChar",
		"writeLines",
		"xor",
		"xor.hexmode",
		"xor.octmode",
		"xpdrows.data.frame",
		"xtfrm",
		"xtfrm.AsIs",
		"xtfrm.Date",
		"xtfrm.default",
		"xtfrm.difftime",
		"xtfrm.factor",
		"xtfrm.numeric_version",
		"xtfrm.POSIXct",
		"xtfrm.POSIXlt",
		"xtfrm.Surv",
		"xzfile",
		"zapsmall"
	],
	"methods" : {
		"abbreviate" : "abbreviate(names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE, strict = FALSE, method = c(\"left.kept\", \"both.sides\")) ",
		"abs" : "abs(x) ",
		"acos" : "acos(x) ",
		"acosh" : "acosh(x) ",
		"addNA" : "addNA(x, ifany = FALSE) ",
		"addTaskCallback" : "addTaskCallback(f, data = NULL, name = character()) ",
		"agrep" : "agrep(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, value = FALSE, fixed = TRUE, useBytes = FALSE) ",
		"agrepl" : "agrepl(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, fixed = TRUE, useBytes = FALSE) ",
		"alist" : "alist(...) ",
		"all" : "all(..., na.rm = FALSE) ",
		"all.equal" : "all.equal(target, current, ...) ",
		"all.equal.character" : "all.equal.character(target, current, ..., check.attributes = TRUE) ",
		"all.equal.default" : "all.equal.default(target, current, ...) ",
		"all.equal.environment" : "all.equal.environment(target, current, all.names = TRUE, ...) ",
		"all.equal.envRefClass" : "all.equal.envRefClass(target, current, ...) ",
		"all.equal.factor" : "all.equal.factor(target, current, ..., check.attributes = TRUE) ",
		"all.equal.formula" : "all.equal.formula(target, current, ...) ",
		"all.equal.language" : "all.equal.language(target, current, ...) ",
		"all.equal.list" : "all.equal.list(target, current, ..., check.attributes = TRUE, use.names = TRUE) ",
		"all.equal.numeric" : "all.equal.numeric(target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, ..., check.attributes = TRUE) ",
		"all.equal.POSIXt" : "all.equal.POSIXt(target, current, ..., tolerance = 0.001, scale) ",
		"all.equal.raw" : "all.equal.raw(target, current, ..., check.attributes = TRUE) ",
		"all.names" : "all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE) ",
		"all.vars" : "all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE) ",
		"any" : "any(..., na.rm = FALSE) ",
		"anyDuplicated" : "anyDuplicated(x, incomparables = FALSE, ...) ",
		"anyDuplicated.array" : "anyDuplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...) ",
		"anyDuplicated.data.frame" : "anyDuplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
		"anyDuplicated.default" : "anyDuplicated.default(x, incomparables = FALSE, fromLast = FALSE, ...) ",
		"anyDuplicated.matrix" : "anyDuplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...) ",
		"anyNA" : "anyNA(x, recursive = FALSE) ",
		"anyNA.numeric_version" : "anyNA.numeric_version(x, recursive = FALSE) ",
		"anyNA.POSIXlt" : "anyNA.POSIXlt(x, recursive = FALSE) ",
		"aperm" : "aperm(a, perm, ...) ",
		"aperm.default" : "aperm.default(a, perm = NULL, resize = TRUE, ...) ",
		"aperm.table" : "aperm.table(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...) ",
		"append" : "append(x, values, after = length(x)) ",
		"apply" : "apply(X, MARGIN, FUN, ...) ",
		"Arg" : "Arg(z) ",
		"args" : "args(name) ",
		"array" : "array(data = NA, dim = length(data), dimnames = NULL) ",
		"arrayInd" : "arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE) ",
		"as.array" : "as.array(x, ...) ",
		"as.array.default" : "as.array.default(x, ...) ",
		"as.call" : "as.call(x) ",
		"as.character" : "as.character(x, ...) ",
		"as.character.condition" : "as.character.condition(x, ...) ",
		"as.character.Date" : "as.character.Date(x, ...) ",
		"as.character.default" : "as.character.default(x, ...) ",
		"as.character.error" : "as.character.error(x, ...) ",
		"as.character.factor" : "as.character.factor(x, ...) ",
		"as.character.hexmode" : "as.character.hexmode(x, ...) ",
		"as.character.numeric_version" : "as.character.numeric_version(x, ...) ",
		"as.character.octmode" : "as.character.octmode(x, ...) ",
		"as.character.POSIXt" : "as.character.POSIXt(x, ...) ",
		"as.character.srcref" : "as.character.srcref(x, useSource = TRUE, to = x, ...) ",
		"as.complex" : "as.complex(x, ...) ",
		"as.data.frame" : "as.data.frame(x, row.names = NULL, optional = FALSE, ...) ",
		"as.data.frame.array" : "as.data.frame.array(x, row.names = NULL, optional = FALSE, ...) ",
		"as.data.frame.AsIs" : "as.data.frame.AsIs(x, row.names = NULL, optional = FALSE, ...) ",
		"as.data.frame.character" : "as.data.frame.character(x, ..., stringsAsFactors = default.stringsAsFactors()) ",
		"as.data.frame.complex" : "as.data.frame.complex(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.data.frame" : "as.data.frame.data.frame(x, row.names = NULL, ...) ",
		"as.data.frame.Date" : "as.data.frame.Date(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.default" : "as.data.frame.default(x, ...) ",
		"as.data.frame.difftime" : "as.data.frame.difftime(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.factor" : "as.data.frame.factor(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.integer" : "as.data.frame.integer(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.list" : "as.data.frame.list(x, row.names = NULL, optional = FALSE, ..., cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors()) ",
		"as.data.frame.logical" : "as.data.frame.logical(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.matrix" : "as.data.frame.matrix(x, row.names = NULL, optional = FALSE, ..., stringsAsFactors = default.stringsAsFactors()) ",
		"as.data.frame.model.matrix" : "as.data.frame.model.matrix(x, row.names = NULL, optional = FALSE, ...) ",
		"as.data.frame.noquote" : "as.data.frame.noquote(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.numeric" : "as.data.frame.numeric(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.numeric_version" : "as.data.frame.numeric_version(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.ordered" : "as.data.frame.ordered(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.POSIXct" : "as.data.frame.POSIXct(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.POSIXlt" : "as.data.frame.POSIXlt(x, row.names = NULL, optional = FALSE, ...) ",
		"as.data.frame.raw" : "as.data.frame.raw(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.data.frame.table" : "as.data.frame.table(x, row.names = NULL, ..., responseName = \"Freq\", stringsAsFactors = TRUE, sep = \"\", base = list(LETTERS)) ",
		"as.data.frame.ts" : "as.data.frame.ts(x, ...) ",
		"as.data.frame.vector" : "as.data.frame.vector(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")) ",
		"as.Date" : "as.Date(x, ...) ",
		"as.Date.character" : "as.Date.character(x, format, ...) ",
		"as.Date.date" : "as.Date.date(x, ...) ",
		"as.Date.dates" : "as.Date.dates(x, ...) ",
		"as.Date.default" : "as.Date.default(x, ...) ",
		"as.Date.factor" : "as.Date.factor(x, ...) ",
		"as.Date.numeric" : "as.Date.numeric(x, origin, ...) ",
		"as.Date.POSIXct" : "as.Date.POSIXct(x, tz = \"UTC\", ...) ",
		"as.Date.POSIXlt" : "as.Date.POSIXlt(x, ...) ",
		"as.difftime" : "as.difftime(tim, format = \"%X\", units = \"auto\") ",
		"as.double" : "as.double(x, ...) ",
		"as.double.difftime" : "as.double.difftime(x, units = \"auto\", ...) ",
		"as.double.POSIXlt" : "as.double.POSIXlt(x, ...) ",
		"as.environment" : "as.environment(x) ",
		"as.expression" : "as.expression(x, ...) ",
		"as.expression.default" : "as.expression.default(x, ...) ",
		"as.factor" : "as.factor(x) ",
		"as.function" : "as.function(x, ...) ",
		"as.function.default" : "as.function.default(x, envir = parent.frame(), ...) ",
		"as.hexmode" : "as.hexmode(x) ",
		"as.integer" : "as.integer(x, ...) ",
		"as.list" : "as.list(x, ...) ",
		"as.list.data.frame" : "as.list.data.frame(x, ...) ",
		"as.list.Date" : "as.list.Date(x, ...) ",
		"as.list.default" : "as.list.default(x, ...) ",
		"as.list.environment" : "as.list.environment(x, all.names = FALSE, sorted = FALSE, ...) ",
		"as.list.factor" : "as.list.factor(x, ...) ",
		"as.list.function" : "as.list.function(x, ...) ",
		"as.list.numeric_version" : "as.list.numeric_version(x, ...) ",
		"as.list.POSIXct" : "as.list.POSIXct(x, ...) ",
		"as.logical" : "as.logical(x, ...) ",
		"as.logical.factor" : "as.logical.factor(x, ...) ",
		"as.matrix" : "as.matrix(x, ...) ",
		"as.matrix.data.frame" : "as.matrix.data.frame(x, rownames.force = NA, ...) ",
		"as.matrix.default" : "as.matrix.default(x, ...) ",
		"as.matrix.noquote" : "as.matrix.noquote(x, ...) ",
		"as.matrix.POSIXlt" : "as.matrix.POSIXlt(x, ...) ",
		"as.name" : "as.name(x) ",
		"as.null" : "as.null(x, ...) ",
		"as.null.default" : "as.null.default(x, ...) ",
		"as.numeric" : "as.numeric(x, ...) ",
		"as.numeric_version" : "as.numeric_version(x) ",
		"as.octmode" : "as.octmode(x) ",
		"as.ordered" : "as.ordered(x) ",
		"as.package_version" : "as.package_version(x) ",
		"as.pairlist" : "as.pairlist(x) ",
		"as.POSIXct" : "as.POSIXct(x, tz = \"\", ...) ",
		"as.POSIXct.date" : "as.POSIXct.date(x, ...) ",
		"as.POSIXct.Date" : "as.POSIXct.Date(x, ...) ",
		"as.POSIXct.dates" : "as.POSIXct.dates(x, ...) ",
		"as.POSIXct.default" : "as.POSIXct.default(x, tz = \"\", ...) ",
		"as.POSIXct.numeric" : "as.POSIXct.numeric(x, tz = \"\", origin, ...) ",
		"as.POSIXct.POSIXlt" : "as.POSIXct.POSIXlt(x, tz = \"\", ...) ",
		"as.POSIXlt" : "as.POSIXlt(x, tz = \"\", ...) ",
		"as.POSIXlt.character" : "as.POSIXlt.character(x, tz = \"\", format, ...) ",
		"as.POSIXlt.date" : "as.POSIXlt.date(x, ...) ",
		"as.POSIXlt.Date" : "as.POSIXlt.Date(x, ...) ",
		"as.POSIXlt.dates" : "as.POSIXlt.dates(x, ...) ",
		"as.POSIXlt.default" : "as.POSIXlt.default(x, tz = \"\", ...) ",
		"as.POSIXlt.factor" : "as.POSIXlt.factor(x, ...) ",
		"as.POSIXlt.numeric" : "as.POSIXlt.numeric(x, tz = \"\", origin, ...) ",
		"as.POSIXlt.POSIXct" : "as.POSIXlt.POSIXct(x, tz = \"\", ...) ",
		"as.qr" : "as.qr(x) ",
		"as.raw" : "as.raw(x) ",
		"as.single" : "as.single(x, ...) ",
		"as.single.default" : "as.single.default(x, ...) ",
		"as.symbol" : "as.symbol(x) ",
		"as.table" : "as.table(x, ...) ",
		"as.table.default" : "as.table.default(x, ...) ",
		"as.vector" : "as.vector(x, mode = \"any\") ",
		"as.vector.factor" : "as.vector.factor(x, mode = \"any\") ",
		"asin" : "asin(x) ",
		"asinh" : "asinh(x) ",
		"asNamespace" : "asNamespace(ns, base.OK = TRUE) ",
		"asS3" : "asS3(object, flag = TRUE, complete = TRUE) ",
		"asS4" : "asS4(object, flag = TRUE, complete = TRUE) ",
		"assign" : "assign(x, value, pos = -1, envir = as.environment(pos), inherits = FALSE, immediate = TRUE) ",
		"atan" : "atan(x) ",
		"atan2" : "atan2(y, x) ",
		"atanh" : "atanh(x) ",
		"attach" : "attach(what, pos = 2L, name = deparse(substitute(what)), warn.conflicts = TRUE) ",
		"attachNamespace" : "attachNamespace(ns, pos = 2L, depends = NULL) ",
		"attr" : "attr(x, which, exact = FALSE) ",
		"attr.all.equal" : "attr.all.equal(target, current, ..., check.attributes = TRUE, check.names = TRUE) ",
		"attributes" : "attributes(obj) ",
		"autoload" : "autoload(name, package, reset = FALSE, ...) ",
		"autoloader" : "autoloader(name, package, ...) ",
		"backsolve" : "backsolve(r, x, k = ncol(r), upper.tri = TRUE, transpose = FALSE) ",
		"baseenv" : "baseenv() ",
		"basename" : "basename(path) ",
		"besselI" : "besselI(x, nu, expon.scaled = FALSE) ",
		"besselJ" : "besselJ(x, nu) ",
		"besselK" : "besselK(x, nu, expon.scaled = FALSE) ",
		"besselY" : "besselY(x, nu) ",
		"beta" : "beta(a, b) ",
		"bindingIsActive" : "bindingIsActive(sym, env) ",
		"bindingIsLocked" : "bindingIsLocked(sym, env) ",
		"bindtextdomain" : "bindtextdomain(domain, dirname = NULL) ",
		"bitwAnd" : "bitwAnd(a, b) ",
		"bitwNot" : "bitwNot(a) ",
		"bitwOr" : "bitwOr(a, b) ",
		"bitwShiftL" : "bitwShiftL(a, n) ",
		"bitwShiftR" : "bitwShiftR(a, n) ",
		"bitwXor" : "bitwXor(a, b) ",
		"body" : "body(fun = sys.function(sys.parent())) ",
		"bquote" : "bquote(expr, where = parent.frame()) ",
		"browser" : "browser(text = \"\", condition = NULL, expr = TRUE, skipCalls = 0L) ",
		"browserCondition" : "browserCondition(n = 1L) ",
		"browserSetDebug" : "browserSetDebug(n = 1L) ",
		"browserText" : "browserText(n = 1L) ",
		"builtins" : "builtins(internal = FALSE) ",
		"by" : "by(data, INDICES, FUN, ..., simplify = TRUE) ",
		"by.data.frame" : "by.data.frame(data, INDICES, FUN, ..., simplify = TRUE) ",
		"by.default" : "by.default(data, INDICES, FUN, ..., simplify = TRUE) ",
		"bzfile" : "bzfile(description, open = \"\", encoding = getOption(\"encoding\"), compression = 9) ",
		"c.Date" : "c.Date(..., recursive = FALSE) ",
		"c.difftime" : "c.difftime(..., recursive = FALSE) ",
		"c.noquote" : "c.noquote(..., recursive = FALSE) ",
		"c.numeric_version" : "c.numeric_version(..., recursive = FALSE) ",
		"c.POSIXct" : "c.POSIXct(..., recursive = FALSE) ",
		"c.POSIXlt" : "c.POSIXlt(..., recursive = FALSE) ",
		"c.warnings" : "c.warnings(..., recursive = FALSE) ",
		"call" : "call(name, ...) ",
		"callCC" : "callCC(fun) ",
		"capabilities" : "capabilities(what = NULL) ",
		"casefold" : "casefold(x, upper = FALSE) ",
		"cat" : "cat(..., file = \"\", sep = \" \", fill = FALSE, labels = NULL, append = FALSE) ",
		"cbind" : "cbind(..., deparse.level = 1) ",
		"cbind.data.frame" : "cbind.data.frame(..., deparse.level = 1) ",
		"ceiling" : "ceiling(x) ",
		"char.expand" : "char.expand(input, target, nomatch = stop(\"no match\")) ",
		"character" : "character(length = 0L) ",
		"charmatch" : "charmatch(x, table, nomatch = NA_integer_) ",
		"charToRaw" : "charToRaw(x) ",
		"chartr" : "chartr(old, new, x) ",
		"check_tzones" : "check_tzones(...) ",
		"chkDots" : "chkDots(..., which.call = -1, allowed = character(0)) ",
		"chol" : "chol(x, ...) ",
		"chol.default" : "chol.default(x, pivot = FALSE, LINPACK = FALSE, tol = -1, ...) ",
		"chol2inv" : "chol2inv(x, size = NCOL(x), LINPACK = FALSE) ",
		"choose" : "choose(n, k) ",
		"class" : "class(x) ",
		"clearPushBack" : "clearPushBack(connection) ",
		"close" : "close(con, ...) ",
		"close.connection" : "close.connection(con, type = \"rw\", ...) ",
		"close.srcfile" : "close.srcfile(con, ...) ",
		"close.srcfilealias" : "close.srcfilealias(con, ...) ",
		"closeAllConnections" : "closeAllConnections() ",
		"col" : "col(x, as.factor = FALSE) ",
		"colMeans" : "colMeans(x, na.rm = FALSE, dims = 1L) ",
		"colnames" : "colnames(x, do.NULL = TRUE, prefix = \"col\") ",
		"colSums" : "colSums(x, na.rm = FALSE, dims = 1L) ",
		"commandArgs" : "commandArgs(trailingOnly = FALSE) ",
		"comment" : "comment(x) ",
		"complex" : "complex(length.out = 0L, real = numeric(), imaginary = numeric(), modulus = 1, argument = 0) ",
		"computeRestarts" : "computeRestarts(cond = NULL) ",
		"conditionCall" : "conditionCall(c) ",
		"conditionCall.condition" : "conditionCall.condition(c) ",
		"conditionMessage" : "conditionMessage(c) ",
		"conditionMessage.condition" : "conditionMessage.condition(c) ",
		"conflicts" : "conflicts(where = search(), detail = FALSE) ",
		"Conj" : "Conj(z) ",
		"contributors" : "contributors() ",
		"cos" : "cos(x) ",
		"cosh" : "cosh(x) ",
		"cospi" : "cospi(x) ",
		"crossprod" : "crossprod(x, y = NULL) ",
		"Cstack_info" : "Cstack_info() ",
		"cummax" : "cummax(x) ",
		"cummin" : "cummin(x) ",
		"cumprod" : "cumprod(x) ",
		"cumsum" : "cumsum(x) ",
		"curlGetHeaders" : "curlGetHeaders(url, redirect = TRUE, verify = TRUE) ",
		"cut" : "cut(x, ...) ",
		"cut.Date" : "cut.Date(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ...) ",
		"cut.default" : "cut.default(x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE, dig.lab = 3L, ordered_result = FALSE, ...) ",
		"cut.POSIXt" : "cut.POSIXt(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ...) ",
		"data.class" : "data.class(x) ",
		"data.frame" : "data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE, fix.empty.names = TRUE, stringsAsFactors = default.stringsAsFactors()) ",
		"data.matrix" : "data.matrix(frame, rownames.force = NA) ",
		"date" : "date() ",
		"debug" : "debug(fun, text = \"\", condition = NULL) ",
		"debuggingState" : "debuggingState(on = NULL) ",
		"debugonce" : "debugonce(fun, text = \"\", condition = NULL) ",
		"default.stringsAsFactors" : "default.stringsAsFactors() ",
		"delayedAssign" : "delayedAssign(x, value, eval.env = parent.frame(1), assign.env = parent.frame(1)) ",
		"deparse" : "deparse(expr, width.cutoff = 60L, backtick = mode(expr) %in% c(\"call\", \"expression\", \"(\", \"function\"), control = c(\"keepInteger\", \"showAttributes\", \"keepNA\"), nlines = -1L) ",
		"det" : "det(x, ...) ",
		"detach" : "detach(name, pos = 2L, unload = FALSE, character.only = FALSE, force = FALSE) ",
		"determinant" : "determinant(x, logarithm = TRUE, ...) ",
		"determinant.matrix" : "determinant.matrix(x, logarithm = TRUE, ...) ",
		"dget" : "dget(file, keep.source = FALSE) ",
		"diag" : "diag(x = 1, nrow, ncol) ",
		"diff" : "diff(x, ...) ",
		"diff.Date" : "diff.Date(x, lag = 1L, differences = 1L, ...) ",
		"diff.default" : "diff.default(x, lag = 1L, differences = 1L, ...) ",
		"diff.difftime" : "diff.difftime(x, ...) ",
		"diff.POSIXt" : "diff.POSIXt(x, lag = 1L, differences = 1L, ...) ",
		"difftime" : "difftime(time1, time2, tz, units = c(\"auto\", \"secs\", \"mins\", \"hours\", \"days\", \"weeks\")) ",
		"digamma" : "digamma(x) ",
		"dim" : "dim(x) ",
		"dim.data.frame" : "dim.data.frame(x) ",
		"dimnames" : "dimnames(x) ",
		"dimnames.data.frame" : "dimnames.data.frame(x) ",
		"dir" : "dir(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE) ",
		"dir.create" : "dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = \"0777\") ",
		"dir.exists" : "dir.exists(paths) ",
		"dirname" : "dirname(path) ",
		"do.call" : "do.call(what, args, quote = FALSE, envir = parent.frame()) ",
		"dontCheck" : "dontCheck(x) ",
		"double" : "double(length = 0L) ",
		"dput" : "dput(x, file = \"\", control = c(\"keepNA\", \"keepInteger\", \"showAttributes\")) ",
		"dQuote" : "dQuote(x) ",
		"drop" : "drop(x) ",
		"droplevels" : "droplevels(x, ...) ",
		"droplevels.data.frame" : "droplevels.data.frame(x, except = NULL, ...) ",
		"droplevels.factor" : "droplevels.factor(x, ...) ",
		"dump" : "dump(list, file = \"dumpdata.R\", append = FALSE, control = \"all\", envir = parent.frame(), evaluate = TRUE) ",
		"duplicated" : "duplicated(x, incomparables = FALSE, ...) ",
		"duplicated.array" : "duplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...) ",
		"duplicated.data.frame" : "duplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
		"duplicated.default" : "duplicated.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ...) ",
		"duplicated.matrix" : "duplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ...) ",
		"duplicated.numeric_version" : "duplicated.numeric_version(x, incomparables = FALSE, ...) ",
		"duplicated.POSIXlt" : "duplicated.POSIXlt(x, incomparables = FALSE, ...) ",
		"dyn.load" : "dyn.load(x, local = TRUE, now = TRUE, ...) ",
		"dyn.unload" : "dyn.unload(x) ",
		"dynGet" : "dynGet(x, ifnotfound = stop(gettextf(\"%s not found\", sQuote(x)), domain = NA), minframe = 1L, inherits = FALSE) ",
		"eapply" : "eapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE) ",
		"eigen" : "eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE) ",
		"emptyenv" : "emptyenv() ",
		"enc2native" : "enc2native(x) ",
		"enc2utf8" : "enc2utf8(x) ",
		"encodeString" : "encodeString(x, width = 0L, quote = \"\", na.encode = TRUE, justify = c(\"left\", \"right\", \"centre\", \"none\")) ",
		"Encoding" : "Encoding(x) ",
		"endsWith" : "endsWith(x, suffix) ",
		"enquote" : "enquote(cl) ",
		"env.profile" : "env.profile(env) ",
		"environment" : "environment(fun = NULL) ",
		"environmentIsLocked" : "environmentIsLocked(env) ",
		"environmentName" : "environmentName(env) ",
		"eval" : "eval(expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) ",
		"eval.parent" : "eval.parent(expr, n = 1) ",
		"evalq" : "evalq(expr, envir = parent.frame(), enclos = if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()) ",
		"exists" : "exists(x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), frame, mode = \"any\", inherits = TRUE) ",
		"exp" : "exp(x) ",
		"expand.grid" : "expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE) ",
		"expm1" : "expm1(x) ",
		"expression" : "expression(...) ",
		"extSoftVersion" : "extSoftVersion() ",
		"factor" : "factor(x = character(), levels, labels = levels, exclude = NA, ordered = is.ordered(x), nmax = NA) ",
		"factorial" : "factorial(x) ",
		"fifo" : "fifo(description, open = \"\", blocking = FALSE, encoding = getOption(\"encoding\")) ",
		"file" : "file(description = \"\", open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"), raw = FALSE, method = getOption(\"url.method\", \"default\")) ",
		"file.access" : "file.access(names, mode = 0) ",
		"file.append" : "file.append(file1, file2) ",
		"file.choose" : "file.choose(new = FALSE) ",
		"file.copy" : "file.copy(from, to, overwrite = recursive, recursive = FALSE, copy.mode = TRUE, copy.date = FALSE) ",
		"file.create" : "file.create(..., showWarnings = TRUE) ",
		"file.exists" : "file.exists(...) ",
		"file.info" : "file.info(..., extra_cols = TRUE) ",
		"file.link" : "file.link(from, to) ",
		"file.mode" : "file.mode(...) ",
		"file.mtime" : "file.mtime(...) ",
		"file.path" : "file.path(..., fsep = .Platform$file.sep) ",
		"file.remove" : "file.remove(...) ",
		"file.rename" : "file.rename(from, to) ",
		"file.show" : "file.show(..., header = rep(\"\", nfiles), title = \"R Information\", delete.file = FALSE, pager = getOption(\"pager\"), encoding = \"\") ",
		"file.size" : "file.size(...) ",
		"file.symlink" : "file.symlink(from, to) ",
		"Filter" : "Filter(f, x) ",
		"Find" : "Find(f, x, right = FALSE, nomatch = NULL) ",
		"find.package" : "find.package(package = NULL, lib.loc = NULL, quiet = FALSE, verbose = getOption(\"verbose\")) ",
		"findInterval" : "findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE, left.open = FALSE) ",
		"findPackageEnv" : "findPackageEnv(info) ",
		"findRestart" : "findRestart(name, cond = NULL) ",
		"floor" : "floor(x) ",
		"flush" : "flush(con) ",
		"flush.connection" : "flush.connection(con) ",
		"force" : "force(x) ",
		"forceAndCall" : "forceAndCall(n, FUN, ...) ",
		"formals" : "formals(fun = sys.function(sys.parent())) ",
		"format" : "format(x, ...) ",
		"format.AsIs" : "format.AsIs(x, width = 12, ...) ",
		"format.data.frame" : "format.data.frame(x, ..., justify = \"none\") ",
		"format.Date" : "format.Date(x, ...) ",
		"format.default" : "format.default(x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c(\"left\", \"right\", \"centre\", \"none\"), width = NULL, na.encode = TRUE, scientific = NA, big.mark = \"\", big.interval = 3L, small.mark = \"\", small.interval = 5L, decimal.mark = getOption(\"OutDec\"), zero.print = NULL, drop0trailing = FALSE, ...) ",
		"format.difftime" : "format.difftime(x, ...) ",
		"format.factor" : "format.factor(x, ...) ",
		"format.hexmode" : "format.hexmode(x, width = NULL, upper.case = FALSE, ...) ",
		"format.info" : "format.info(x, digits = NULL, nsmall = 0L) ",
		"format.libraryIQR" : "format.libraryIQR(x, ...) ",
		"format.numeric_version" : "format.numeric_version(x, ...) ",
		"format.octmode" : "format.octmode(x, width = NULL, ...) ",
		"format.packageInfo" : "format.packageInfo(x, ...) ",
		"format.POSIXct" : "format.POSIXct(x, format = \"\", tz = \"\", usetz = FALSE, ...) ",
		"format.POSIXlt" : "format.POSIXlt(x, format = \"\", usetz = FALSE, ...) ",
		"format.pval" : "format.pval(pv, digits = max(1L, getOption(\"digits\") - 2L), eps = .Machine$double.eps, na.form = \"NA\", ...) ",
		"format.summaryDefault" : "format.summaryDefault(x, ...) ",
		"formatC" : "formatC(x, digits = NULL, width = NULL, format = NULL, flag = \"\", mode = NULL, big.mark = \"\", big.interval = 3L, small.mark = \"\", small.interval = 5L, decimal.mark = getOption(\"OutDec\"), preserve.width = \"individual\", zero.print = NULL, drop0trailing = FALSE) ",
		"formatDL" : "formatDL(x, y, style = c(\"table\", \"list\"), width = 0.9 * getOption(\"width\"), indent = NULL) ",
		"forwardsolve" : "forwardsolve(l, x, k = ncol(l), upper.tri = FALSE, transpose = FALSE) ",
		"gamma" : "gamma(x) ",
		"gc" : "gc(verbose = getOption(\"verbose\"), reset = FALSE) ",
		"gc.time" : "gc.time(on = TRUE) ",
		"gcinfo" : "gcinfo(verbose) ",
		"gctorture" : "gctorture(on = TRUE) ",
		"gctorture2" : "gctorture2(step, wait = step, inhibit_release = FALSE) ",
		"get" : "get(x, pos = -1L, envir = as.environment(pos), mode = \"any\", inherits = TRUE) ",
		"get0" : "get0(x, envir = pos.to.env(-1L), mode = \"any\", inherits = TRUE, ifnotfound = NULL) ",
		"getAllConnections" : "getAllConnections() ",
		"getCallingDLL" : "getCallingDLL(f = sys.function(-1), doStop = FALSE) ",
		"getCallingDLLe" : "getCallingDLLe(e) ",
		"getConnection" : "getConnection(what) ",
		"getDLLRegisteredRoutines" : "getDLLRegisteredRoutines(dll, addNames = TRUE) ",
		"getDLLRegisteredRoutines.character" : "getDLLRegisteredRoutines.character(dll, addNames = TRUE) ",
		"getDLLRegisteredRoutines.DLLInfo" : "getDLLRegisteredRoutines.DLLInfo(dll, addNames = TRUE) ",
		"getElement" : "getElement(object, name) ",
		"geterrmessage" : "geterrmessage() ",
		"getExportedValue" : "getExportedValue(ns, name) ",
		"getHook" : "getHook(hookName) ",
		"getLoadedDLLs" : "getLoadedDLLs() ",
		"getNamespace" : "getNamespace(name) ",
		"getNamespaceExports" : "getNamespaceExports(ns) ",
		"getNamespaceImports" : "getNamespaceImports(ns) ",
		"getNamespaceInfo" : "getNamespaceInfo(ns, which) ",
		"getNamespaceName" : "getNamespaceName(ns) ",
		"getNamespaceUsers" : "getNamespaceUsers(ns) ",
		"getNamespaceVersion" : "getNamespaceVersion(ns) ",
		"getNativeSymbolInfo" : "getNativeSymbolInfo(name, PACKAGE, unlist = TRUE, withRegistrationInfo = FALSE) ",
		"getOption" : "getOption(x, default = NULL) ",
		"getRversion" : "getRversion() ",
		"getSrcLines" : "getSrcLines(srcfile, first, last) ",
		"getTaskCallbackNames" : "getTaskCallbackNames() ",
		"gettext" : "gettext(..., domain = NULL) ",
		"gettextf" : "gettextf(fmt, ..., domain = NULL) ",
		"getwd" : "getwd() ",
		"gl" : "gl(n, k, length = n * k, labels = seq_len(n), ordered = FALSE) ",
		"globalenv" : "globalenv() ",
		"gregexpr" : "gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"grep" : "grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) ",
		"grepl" : "grepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"grepRaw" : "grepRaw(pattern, x, offset = 1L, ignore.case = FALSE, value = FALSE, fixed = FALSE, all = FALSE, invert = FALSE) ",
		"grouping" : "grouping(...) ",
		"gsub" : "gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"gzcon" : "gzcon(con, level = 6, allowNonCompressed = TRUE, text = FALSE) ",
		"gzfile" : "gzfile(description, open = \"\", encoding = getOption(\"encoding\"), compression = 6) ",
		"iconv" : "iconv(x, from = \"\", to = \"\", sub = NA, mark = TRUE, toRaw = FALSE) ",
		"iconvlist" : "iconvlist() ",
		"icuGetCollate" : "icuGetCollate(type = c(\"actual\", \"valid\")) ",
		"icuSetCollate" : "icuSetCollate(...) ",
		"identical" : "identical(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE, ignore.bytecode = TRUE, ignore.environment = FALSE) ",
		"identity" : "identity(x) ",
		"ifelse" : "ifelse(test, yes, no) ",
		"Im" : "Im(z) ",
		"importIntoEnv" : "importIntoEnv(impenv, impnames, expenv, expnames) ",
		"inherits" : "inherits(x, what, which = FALSE) ",
		"integer" : "integer(length = 0L) ",
		"interaction" : "interaction(..., drop = FALSE, sep = \".\", lex.order = FALSE) ",
		"interactive" : "interactive() ",
		"intersect" : "intersect(x, y) ",
		"intToBits" : "intToBits(x) ",
		"intToUtf8" : "intToUtf8(x, multiple = FALSE) ",
		"inverse.rle" : "inverse.rle(x, ...) ",
		"invisible" : "invisible(x) ",
		"invokeRestart" : "invokeRestart(r, ...) ",
		"invokeRestartInteractively" : "invokeRestartInteractively(r) ",
		"is.array" : "is.array(x) ",
		"is.atomic" : "is.atomic(x) ",
		"is.call" : "is.call(x) ",
		"is.character" : "is.character(x) ",
		"is.complex" : "is.complex(x) ",
		"is.data.frame" : "is.data.frame(x) ",
		"is.double" : "is.double(x) ",
		"is.element" : "is.element(el, set) ",
		"is.environment" : "is.environment(x) ",
		"is.expression" : "is.expression(x) ",
		"is.factor" : "is.factor(x) ",
		"is.finite" : "is.finite(x) ",
		"is.function" : "is.function(x) ",
		"is.infinite" : "is.infinite(x) ",
		"is.integer" : "is.integer(x) ",
		"is.language" : "is.language(x) ",
		"is.list" : "is.list(x) ",
		"is.loaded" : "is.loaded(symbol, PACKAGE = \"\", type = \"\") ",
		"is.logical" : "is.logical(x) ",
		"is.matrix" : "is.matrix(x) ",
		"is.na" : "is.na(x) ",
		"is.na.data.frame" : "is.na.data.frame(x) ",
		"is.na.numeric_version" : "is.na.numeric_version(x) ",
		"is.na.POSIXlt" : "is.na.POSIXlt(x) ",
		"is.name" : "is.name(x) ",
		"is.nan" : "is.nan(x) ",
		"is.null" : "is.null(x) ",
		"is.numeric" : "is.numeric(x) ",
		"is.numeric_version" : "is.numeric_version(x) ",
		"is.numeric.Date" : "is.numeric.Date(x) ",
		"is.numeric.difftime" : "is.numeric.difftime(x) ",
		"is.numeric.POSIXt" : "is.numeric.POSIXt(x) ",
		"is.object" : "is.object(x) ",
		"is.ordered" : "is.ordered(x) ",
		"is.package_version" : "is.package_version(x) ",
		"is.pairlist" : "is.pairlist(x) ",
		"is.primitive" : "is.primitive(x) ",
		"is.qr" : "is.qr(x) ",
		"is.R" : "is.R() ",
		"is.raw" : "is.raw(x) ",
		"is.recursive" : "is.recursive(x) ",
		"is.single" : "is.single(x) ",
		"is.symbol" : "is.symbol(x) ",
		"is.table" : "is.table(x) ",
		"is.unsorted" : "is.unsorted(x, na.rm = FALSE, strictly = FALSE) ",
		"is.vector" : "is.vector(x, mode = \"any\") ",
		"isatty" : "isatty(con) ",
		"isBaseNamespace" : "isBaseNamespace(ns) ",
		"isdebugged" : "isdebugged(fun) ",
		"isIncomplete" : "isIncomplete(con) ",
		"isNamespace" : "isNamespace(ns) ",
		"isNamespaceLoaded" : "isNamespaceLoaded(name) ",
		"ISOdate" : "ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = \"GMT\") ",
		"ISOdatetime" : "ISOdatetime(year, month, day, hour, min, sec, tz = \"\") ",
		"isOpen" : "isOpen(con, rw = \"\") ",
		"isRestart" : "isRestart(x) ",
		"isS4" : "isS4(object) ",
		"isSeekable" : "isSeekable(con) ",
		"isSymmetric" : "isSymmetric(object, ...) ",
		"isSymmetric.matrix" : "isSymmetric.matrix(object, tol = 100 * .Machine$double.eps, ...) ",
		"isTRUE" : "isTRUE(x) ",
		"jitter" : "jitter(x, factor = 1, amount = NULL) ",
		"julian" : "julian(x, ...) ",
		"julian.Date" : "julian.Date(x, origin = as.Date(\"1970-01-01\"), ...) ",
		"julian.POSIXt" : "julian.POSIXt(x, origin = as.POSIXct(\"1970-01-01\", tz = \"GMT\"), ...) ",
		"kappa" : "kappa(z, ...) ",
		"kappa.default" : "kappa.default(z, exact = FALSE, norm = NULL, method = c(\"qr\", \"direct\"), ...) ",
		"kappa.lm" : "kappa.lm(z, ...) ",
		"kappa.qr" : "kappa.qr(z, ...) ",
		"kronecker" : "kronecker(X, Y, FUN = \"*\", make.dimnames = FALSE, ...) ",
		"l10n_info" : "l10n_info() ",
		"La_version" : "La_version() ",
		"La.svd" : "La.svd(x, nu = min(n, p), nv = min(n, p)) ",
		"labels" : "labels(object, ...) ",
		"labels.default" : "labels.default(object, ...) ",
		"lapply" : "lapply(X, FUN, ...) ",
		"lazyLoad" : "lazyLoad(filebase, envir = parent.frame(), filter) ",
		"lazyLoadDBexec" : "lazyLoadDBexec(filebase, fun, filter) ",
		"lazyLoadDBfetch" : "lazyLoadDBfetch(key, file, compressed, hook) ",
		"lbeta" : "lbeta(a, b) ",
		"lchoose" : "lchoose(n, k) ",
		"length" : "length(x) ",
		"length.POSIXlt" : "length.POSIXlt(x) ",
		"lengths" : "lengths(x, use.names = TRUE) ",
		"levels" : "levels(x) ",
		"levels.default" : "levels.default(x) ",
		"lfactorial" : "lfactorial(x) ",
		"lgamma" : "lgamma(x) ",
		"libcurlVersion" : "libcurlVersion() ",
		"library" : "library(package, help, pos = 2, lib.loc = NULL, character.only = FALSE, logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE, verbose = getOption(\"verbose\")) ",
		"library.dynam" : "library.dynam(chname, package, lib.loc, verbose = getOption(\"verbose\"), file.ext = .Platform$dynlib.ext, ...) ",
		"library.dynam.unload" : "library.dynam.unload(chname, libpath, verbose = getOption(\"verbose\"), file.ext = .Platform$dynlib.ext) ",
		"licence" : "licence() ",
		"license" : "license() ",
		"list" : "list(...) ",
		"list.dirs" : "list.dirs(path = \".\", full.names = TRUE, recursive = TRUE) ",
		"list.files" : "list.files(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE) ",
		"list2env" : "list2env(x, envir = NULL, parent = parent.frame(), hash = (length(x) > 100), size = max(29L, length(x))) ",
		"load" : "load(file, envir = parent.frame(), verbose = FALSE) ",
		"loadedNamespaces" : "loadedNamespaces() ",
		"loadingNamespaceInfo" : "loadingNamespaceInfo() ",
		"loadNamespace" : "loadNamespace(package, lib.loc = NULL, keep.source = getOption(\"keep.source.pkgs\"), partial = FALSE, versionCheck = NULL) ",
		"local" : "local(expr, envir = new.env()) ",
		"lockBinding" : "lockBinding(sym, env) ",
		"lockEnvironment" : "lockEnvironment(env, bindings = FALSE) ",
		"log" : "log(x, base = exp(1)) ",
		"log10" : "log10(x) ",
		"log1p" : "log1p(x) ",
		"log2" : "log2(x) ",
		"logb" : "logb(x, base = exp(1)) ",
		"logical" : "logical(length = 0L) ",
		"lower.tri" : "lower.tri(x, diag = FALSE) ",
		"ls" : "ls(name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) ",
		"make.names" : "make.names(names, unique = FALSE, allow_ = TRUE) ",
		"make.unique" : "make.unique(names, sep = \".\") ",
		"makeActiveBinding" : "makeActiveBinding(sym, fun, env) ",
		"Map" : "Map(f, ...) ",
		"mapply" : "mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) ",
		"margin.table" : "margin.table(x, margin = NULL) ",
		"mat.or.vec" : "mat.or.vec(nr, nc) ",
		"match" : "match(x, table, nomatch = NA_integer_, incomparables = NULL) ",
		"match.arg" : "match.arg(arg, choices, several.ok = FALSE) ",
		"match.call" : "match.call(definition = sys.function(sys.parent()), call = sys.call(sys.parent()), expand.dots = TRUE, envir = parent.frame(2L)) ",
		"match.fun" : "match.fun(FUN, descend = TRUE) ",
		"Math.data.frame" : "Math.data.frame(x, ...) ",
		"Math.Date" : "Math.Date(x, ...) ",
		"Math.difftime" : "Math.difftime(x, ...) ",
		"Math.factor" : "Math.factor(x, ...) ",
		"Math.POSIXt" : "Math.POSIXt(x, ...) ",
		"matrix" : "matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) ",
		"max" : "max(..., na.rm = FALSE) ",
		"max.col" : "max.col(m, ties.method = c(\"random\", \"first\", \"last\")) ",
		"mean" : "mean(x, ...) ",
		"mean.Date" : "mean.Date(x, ...) ",
		"mean.default" : "mean.default(x, trim = 0, na.rm = FALSE, ...) ",
		"mean.difftime" : "mean.difftime(x, ...) ",
		"mean.POSIXct" : "mean.POSIXct(x, ...) ",
		"mean.POSIXlt" : "mean.POSIXlt(x, ...) ",
		"mem.limits" : "mem.limits(nsize = NA, vsize = NA) ",
		"memCompress" : "memCompress(from, type = c(\"gzip\", \"bzip2\", \"xz\", \"none\")) ",
		"memDecompress" : "memDecompress(from, type = c(\"unknown\", \"gzip\", \"bzip2\", \"xz\", \"none\"), asChar = FALSE) ",
		"memory.profile" : "memory.profile() ",
		"merge" : "merge(x, y, ...) ",
		"merge.data.frame" : "merge.data.frame(x, y, by = intersect(names(x), names(y)), by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all, sort = TRUE, suffixes = c(\".x\", \".y\"), incomparables = NULL, ...) ",
		"merge.default" : "merge.default(x, y, ...) ",
		"message" : "message(..., domain = NULL, appendLF = TRUE) ",
		"mget" : "mget(x, envir = as.environment(-1L), mode = \"any\", ifnotfound, inherits = FALSE) ",
		"min" : "min(..., na.rm = FALSE) ",
		"missing" : "missing(x) ",
		"Mod" : "Mod(z) ",
		"mode" : "mode(x) ",
		"months" : "months(x, abbreviate) ",
		"months.Date" : "months.Date(x, abbreviate = FALSE) ",
		"months.POSIXt" : "months.POSIXt(x, abbreviate = FALSE) ",
		"names" : "names(x) ",
		"names.POSIXlt" : "names.POSIXlt(x) ",
		"namespaceExport" : "namespaceExport(ns, vars) ",
		"namespaceImport" : "namespaceImport(self, ..., from = NULL, except = character(0L)) ",
		"namespaceImportClasses" : "namespaceImportClasses(self, ns, vars, from = NULL) ",
		"namespaceImportFrom" : "namespaceImportFrom(self, ns, vars, generics, packages, from = \"non-package environment\", except = character(0L)) ",
		"namespaceImportMethods" : "namespaceImportMethods(self, ns, vars, from = NULL) ",
		"nargs" : "nargs() ",
		"nchar" : "nchar(x, type = \"chars\", allowNA = FALSE, keepNA = NA) ",
		"ncol" : "ncol(x) ",
		"NCOL" : "NCOL(x) ",
		"Negate" : "Negate(f) ",
		"new.env" : "new.env(hash = TRUE, parent = parent.frame(), size = 29L) ",
		"NextMethod" : "NextMethod(generic = NULL, object = NULL, ...) ",
		"ngettext" : "ngettext(n, msg1, msg2, domain = NULL) ",
		"nlevels" : "nlevels(x) ",
		"noquote" : "noquote(obj) ",
		"norm" : "norm(x, type = c(\"O\", \"I\", \"F\", \"M\", \"2\")) ",
		"normalizePath" : "normalizePath(path, winslash = \"\\\\\", mustWork = NA) ",
		"nrow" : "nrow(x) ",
		"NROW" : "NROW(x) ",
		"numeric" : "numeric(length = 0L) ",
		"numeric_version" : "numeric_version(x, strict = TRUE) ",
		"nzchar" : "nzchar(x, keepNA = FALSE) ",
		"objects" : "objects(name, pos = -1L, envir = as.environment(pos), all.names = FALSE, pattern, sorted = TRUE) ",
		"oldClass" : "oldClass(x) ",
		"OlsonNames" : "OlsonNames() ",
		"on.exit" : "on.exit(expr = NULL, add = FALSE) ",
		"open" : "open(con, ...) ",
		"open.connection" : "open.connection(con, open = \"r\", blocking = TRUE, ...) ",
		"open.srcfile" : "open.srcfile(con, line, ...) ",
		"open.srcfilealias" : "open.srcfilealias(con, line, ...) ",
		"open.srcfilecopy" : "open.srcfilecopy(con, line, ...) ",
		"Ops.data.frame" : "Ops.data.frame(e1, e2 = NULL) ",
		"Ops.Date" : "Ops.Date(e1, e2) ",
		"Ops.difftime" : "Ops.difftime(e1, e2) ",
		"Ops.factor" : "Ops.factor(e1, e2) ",
		"Ops.numeric_version" : "Ops.numeric_version(e1, e2) ",
		"Ops.ordered" : "Ops.ordered(e1, e2) ",
		"Ops.POSIXt" : "Ops.POSIXt(e1, e2) ",
		"options" : "options(...) ",
		"order" : "order(..., na.last = TRUE, decreasing = FALSE, method = c(\"shell\", \"radix\")) ",
		"ordered" : "ordered(x, ...) ",
		"outer" : "outer(X, Y, FUN = \"*\", ...) ",
		"package_version" : "package_version(x, strict = TRUE) ",
		"packageEvent" : "packageEvent(pkgname, event = c(\"onLoad\", \"attach\", \"detach\", \"onUnload\")) ",
		"packageHasNamespace" : "packageHasNamespace(package, package.lib) ",
		"packageStartupMessage" : "packageStartupMessage(..., domain = NULL, appendLF = TRUE) ",
		"packBits" : "packBits(x, type = c(\"raw\", \"integer\")) ",
		"pairlist" : "pairlist(...) ",
		"parent.env" : "parent.env(env) ",
		"parent.frame" : "parent.frame(n = 1) ",
		"parse" : "parse(file = \"\", n = NULL, text = NULL, prompt = \"?\", keep.source = getOption(\"keep.source\"), srcfile = NULL, encoding = \"unknown\") ",
		"parseNamespaceFile" : "parseNamespaceFile(package, package.lib, mustExist = TRUE) ",
		"paste" : "paste(..., sep = \" \", collapse = NULL) ",
		"paste0" : "paste0(..., collapse = NULL) ",
		"path.expand" : "path.expand(path) ",
		"path.package" : "path.package(package = NULL, quiet = FALSE) ",
		"pcre_config" : "pcre_config() ",
		"pipe" : "pipe(description, open = \"\", encoding = getOption(\"encoding\")) ",
		"pmatch" : "pmatch(x, table, nomatch = NA_integer_, duplicates.ok = FALSE) ",
		"pmax" : "pmax(..., na.rm = FALSE) ",
		"pmax.int" : "pmax.int(..., na.rm = FALSE) ",
		"pmin" : "pmin(..., na.rm = FALSE) ",
		"pmin.int" : "pmin.int(..., na.rm = FALSE) ",
		"polyroot" : "polyroot(z) ",
		"pos.to.env" : "pos.to.env(x) ",
		"Position" : "Position(f, x, right = FALSE, nomatch = NA_integer_) ",
		"pretty" : "pretty(x, ...) ",
		"pretty.default" : "pretty.default(x, n = 5, min.n = n%/%3, shrink.sml = 0.75, high.u.bias = 1.5, u5.bias = 0.5 + 1.5 * high.u.bias, eps.correct = 0, ...) ",
		"prettyNum" : "prettyNum(x, big.mark = \"\", big.interval = 3L, small.mark = \"\", small.interval = 5L, decimal.mark = getOption(\"OutDec\"), input.d.mark = decimal.mark, preserve.width = c(\"common\",     \"individual\", \"none\"), zero.print = NULL, drop0trailing = FALSE, is.cmplx = NA, ...) ",
		"print" : "print(x, ...) ",
		"print.AsIs" : "print.AsIs(x, ...) ",
		"print.by" : "print.by(x, ..., vsep) ",
		"print.condition" : "print.condition(x, ...) ",
		"print.connection" : "print.connection(x, ...) ",
		"print.data.frame" : "print.data.frame(x, ..., digits = NULL, quote = FALSE, right = TRUE, row.names = TRUE) ",
		"print.Date" : "print.Date(x, max = NULL, ...) ",
		"print.default" : "print.default(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, right = FALSE, max = NULL, useSource = TRUE, ...) ",
		"print.difftime" : "print.difftime(x, digits = getOption(\"digits\"), ...) ",
		"print.Dlist" : "print.Dlist(x, ...) ",
		"print.DLLInfo" : "print.DLLInfo(x, ...) ",
		"print.DLLInfoList" : "print.DLLInfoList(x, ...) ",
		"print.DLLRegisteredRoutines" : "print.DLLRegisteredRoutines(x, ...) ",
		"print.factor" : "print.factor(x, quote = FALSE, max.levels = NULL, width = getOption(\"width\"), ...) ",
		"print.function" : "print.function(x, useSource = TRUE, ...) ",
		"print.hexmode" : "print.hexmode(x, ...) ",
		"print.libraryIQR" : "print.libraryIQR(x, ...) ",
		"print.listof" : "print.listof(x, ...) ",
		"print.NativeRoutineList" : "print.NativeRoutineList(x, ...) ",
		"print.noquote" : "print.noquote(x, ...) ",
		"print.numeric_version" : "print.numeric_version(x, ...) ",
		"print.octmode" : "print.octmode(x, ...) ",
		"print.packageInfo" : "print.packageInfo(x, ...) ",
		"print.POSIXct" : "print.POSIXct(x, ...) ",
		"print.POSIXlt" : "print.POSIXlt(x, ...) ",
		"print.proc_time" : "print.proc_time(x, ...) ",
		"print.restart" : "print.restart(x, ...) ",
		"print.rle" : "print.rle(x, digits = getOption(\"digits\"), prefix = \"\", ...) ",
		"print.simple.list" : "print.simple.list(x, ...) ",
		"print.srcfile" : "print.srcfile(x, ...) ",
		"print.srcref" : "print.srcref(x, useSource = TRUE, ...) ",
		"print.summary.table" : "print.summary.table(x, digits = max(1L, getOption(\"digits\") - 3L), ...) ",
		"print.summaryDefault" : "print.summaryDefault(x, ...) ",
		"print.table" : "print.table(x, digits = getOption(\"digits\"), quote = FALSE, na.print = \"\", zero.print = \"0\", justify = \"none\", ...) ",
		"print.warnings" : "print.warnings(x, ...) ",
		"prmatrix" : "prmatrix(x, rowlab = dn[[1]], collab = dn[[2]], quote = TRUE, right = FALSE, na.print = NULL, ...) ",
		"proc.time" : "proc.time() ",
		"prod" : "prod(..., na.rm = FALSE) ",
		"prop.table" : "prop.table(x, margin = NULL) ",
		"provideDimnames" : "provideDimnames(x, sep = \"\", base = list(LETTERS), unique = TRUE) ",
		"psigamma" : "psigamma(x, deriv = 0L) ",
		"pushBack" : "pushBack(data, connection, newLine = TRUE, encoding = c(\"\", \"bytes\", \"UTF-8\")) ",
		"pushBackLength" : "pushBackLength(connection) ",
		"qr" : "qr(x, ...) ",
		"qr.coef" : "qr.coef(qr, y) ",
		"qr.default" : "qr.default(x, tol = 1e-07, LAPACK = FALSE, ...) ",
		"qr.fitted" : "qr.fitted(qr, y, k = qr$rank) ",
		"qr.Q" : "qr.Q(qr, complete = FALSE, Dvec) ",
		"qr.qty" : "qr.qty(qr, y) ",
		"qr.qy" : "qr.qy(qr, y) ",
		"qr.R" : "qr.R(qr, complete = FALSE) ",
		"qr.resid" : "qr.resid(qr, y) ",
		"qr.solve" : "qr.solve(a, b, tol = 1e-07) ",
		"qr.X" : "qr.X(qr, complete = FALSE, ncol = if (complete) nrow(R) else min(dim(R))) ",
		"quarters" : "quarters(x, abbreviate) ",
		"quarters.Date" : "quarters.Date(x, ...) ",
		"quarters.POSIXt" : "quarters.POSIXt(x, ...) ",
		"quit" : "quit(save = \"default\", status = 0, runLast = TRUE) ",
		"quote" : "quote(expr) ",
		"R_system_version" : "R_system_version(x, strict = TRUE) ",
		"R.home" : "R.home(component = \"home\") ",
		"R.Version" : "R.Version() ",
		"range" : "range(..., na.rm = FALSE) ",
		"range.default" : "range.default(..., na.rm = FALSE, finite = FALSE) ",
		"rank" : "rank(x, na.last = TRUE, ties.method = c(\"average\", \"first\", \"last\", \"random\", \"max\", \"min\")) ",
		"rapply" : "rapply(object, f, classes = \"ANY\", deflt = NULL, how = c(\"unlist\", \"replace\", \"list\"), ...) ",
		"raw" : "raw(length = 0L) ",
		"rawConnection" : "rawConnection(object, open = \"r\") ",
		"rawConnectionValue" : "rawConnectionValue(con) ",
		"rawShift" : "rawShift(x, n) ",
		"rawToBits" : "rawToBits(x) ",
		"rawToChar" : "rawToChar(x, multiple = FALSE) ",
		"rbind" : "rbind(..., deparse.level = 1) ",
		"rbind.data.frame" : "rbind.data.frame(..., deparse.level = 1, make.row.names = TRUE, stringsAsFactors = default.stringsAsFactors()) ",
		"rcond" : "rcond(x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, ...) ",
		"Re" : "Re(z) ",
		"read.dcf" : "read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL) ",
		"readBin" : "readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE, endian = .Platform$endian) ",
		"readChar" : "readChar(con, nchars, useBytes = FALSE) ",
		"readline" : "readline(prompt = \"\") ",
		"readLines" : "readLines(con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = \"unknown\", skipNul = FALSE) ",
		"readRDS" : "readRDS(file, refhook = NULL) ",
		"readRenviron" : "readRenviron(path) ",
		"Recall" : "Recall(...) ",
		"Reduce" : "Reduce(f, x, init, right = FALSE, accumulate = FALSE) ",
		"reg.finalizer" : "reg.finalizer(e, f, onexit = FALSE) ",
		"regexec" : "regexec(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"regexpr" : "regexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"registerS3method" : "registerS3method(genname, class, method, envir = parent.frame()) ",
		"registerS3methods" : "registerS3methods(info, package, env) ",
		"regmatches" : "regmatches(x, m, invert = FALSE) ",
		"remove" : "remove(..., list = character(), pos = -1, envir = as.environment(pos), inherits = FALSE) ",
		"removeTaskCallback" : "removeTaskCallback(id) ",
		"rep" : "rep(x, ...) ",
		"rep_len" : "rep_len(x, length.out) ",
		"rep.Date" : "rep.Date(x, ...) ",
		"rep.factor" : "rep.factor(x, ...) ",
		"rep.int" : "rep.int(x, times) ",
		"rep.numeric_version" : "rep.numeric_version(x, ...) ",
		"rep.POSIXct" : "rep.POSIXct(x, ...) ",
		"rep.POSIXlt" : "rep.POSIXlt(x, ...) ",
		"replace" : "replace(x, list, values) ",
		"replicate" : "replicate(n, expr, simplify = \"array\") ",
		"require" : "require(package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, character.only = FALSE) ",
		"requireNamespace" : "requireNamespace(package, ..., quietly = FALSE) ",
		"restartDescription" : "restartDescription(r) ",
		"restartFormals" : "restartFormals(r) ",
		"retracemem" : "retracemem(x, previous = NULL) ",
		"returnValue" : "returnValue(default = NULL) ",
		"rev" : "rev(x) ",
		"rev.default" : "rev.default(x) ",
		"rle" : "rle(x) ",
		"rm" : "rm(..., list = character(), pos = -1, envir = as.environment(pos), inherits = FALSE) ",
		"RNGkind" : "RNGkind(kind = NULL, normal.kind = NULL) ",
		"RNGversion" : "RNGversion(vstr) ",
		"round" : "round(x, digits = 0) ",
		"round.Date" : "round.Date(x, ...) ",
		"round.POSIXt" : "round.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\")) ",
		"row" : "row(x, as.factor = FALSE) ",
		"row.names" : "row.names(x) ",
		"row.names.data.frame" : "row.names.data.frame(x) ",
		"row.names.default" : "row.names.default(x) ",
		"rowMeans" : "rowMeans(x, na.rm = FALSE, dims = 1L) ",
		"rownames" : "rownames(x, do.NULL = TRUE, prefix = \"row\") ",
		"rowsum" : "rowsum(x, group, reorder = TRUE, ...) ",
		"rowsum.data.frame" : "rowsum.data.frame(x, group, reorder = TRUE, na.rm = FALSE, ...) ",
		"rowsum.default" : "rowsum.default(x, group, reorder = TRUE, na.rm = FALSE, ...) ",
		"rowSums" : "rowSums(x, na.rm = FALSE, dims = 1L) ",
		"sample" : "sample(x, size, replace = FALSE, prob = NULL) ",
		"sample.int" : "sample.int(n, size = n, replace = FALSE, prob = NULL) ",
		"sapply" : "sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) ",
		"save" : "save(..., list = character(), file = stop(\"'file' must be specified\"), ascii = FALSE, version = NULL, envir = parent.frame(), compress = isTRUE(!ascii), compression_level, eval.promises = TRUE, precheck = TRUE) ",
		"save.image" : "save.image(file = \".RData\", version = NULL, ascii = FALSE, compress = !ascii, safe = TRUE) ",
		"saveRDS" : "saveRDS(object, file = \"\", ascii = FALSE, version = NULL, compress = TRUE, refhook = NULL) ",
		"scale" : "scale(x, center = TRUE, scale = TRUE) ",
		"scale.default" : "scale.default(x, center = TRUE, scale = TRUE) ",
		"scan" : "scan(file = \"\", what = double(), nmax = -1L, n = -1L, sep = \"\", quote = if (identical(sep, \"\\n\")) \"\" else \"'\\\"\", dec = \".\", skip = 0L, nlines = 0L, na.strings = \"NA\", flush = FALSE, fill = FALSE, strip.white = FALSE, quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE, comment.char = \"\", allowEscapes = FALSE, fileEncoding = \"\", encoding = \"unknown\", text, skipNul = FALSE) ",
		"search" : "search() ",
		"searchpaths" : "searchpaths() ",
		"seek" : "seek(con, ...) ",
		"seek.connection" : "seek.connection(con, where = NA, origin = \"start\", rw = \"\", ...) ",
		"seq" : "seq(...) ",
		"seq_along" : "seq_along(along.with) ",
		"seq_len" : "seq_len(length.out) ",
		"seq.Date" : "seq.Date(from, to, by, length.out = NULL, along.with = NULL, ...) ",
		"seq.default" : "seq.default(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...) ",
		"seq.int" : "seq.int(from, to, by, length.out, along.with, ...) ",
		"seq.POSIXt" : "seq.POSIXt(from, to, by, length.out = NULL, along.with = NULL, ...) ",
		"sequence" : "sequence(nvec) ",
		"serialize" : "serialize(object, connection, ascii = FALSE, xdr = TRUE, version = NULL, refhook = NULL) ",
		"set.seed" : "set.seed(seed, kind = NULL, normal.kind = NULL) ",
		"setdiff" : "setdiff(x, y) ",
		"setequal" : "setequal(x, y) ",
		"setHook" : "setHook(hookName, value, action = c(\"append\", \"prepend\", \"replace\")) ",
		"setNamespaceInfo" : "setNamespaceInfo(ns, which, val) ",
		"setSessionTimeLimit" : "setSessionTimeLimit(cpu = Inf, elapsed = Inf) ",
		"setTimeLimit" : "setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE) ",
		"setwd" : "setwd(dir) ",
		"showConnections" : "showConnections(all = FALSE) ",
		"shQuote" : "shQuote(string, type = c(\"sh\", \"csh\", \"cmd\", \"cmd2\")) ",
		"sign" : "sign(x) ",
		"signalCondition" : "signalCondition(cond) ",
		"signif" : "signif(x, digits = 6) ",
		"simpleCondition" : "simpleCondition(message, call = NULL) ",
		"simpleError" : "simpleError(message, call = NULL) ",
		"simpleMessage" : "simpleMessage(message, call = NULL) ",
		"simpleWarning" : "simpleWarning(message, call = NULL) ",
		"simplify2array" : "simplify2array(x, higher = TRUE) ",
		"sin" : "sin(x) ",
		"single" : "single(length = 0L) ",
		"sinh" : "sinh(x) ",
		"sink" : "sink(file = NULL, append = FALSE, type = c(\"output\", \"message\"), split = FALSE) ",
		"sink.number" : "sink.number(type = c(\"output\", \"message\")) ",
		"sinpi" : "sinpi(x) ",
		"slice.index" : "slice.index(x, MARGIN) ",
		"socketConnection" : "socketConnection(host = \"localhost\", port, server = FALSE, blocking = FALSE, open = \"a+\", encoding = getOption(\"encoding\"), timeout = getOption(\"timeout\")) ",
		"socketSelect" : "socketSelect(socklist, write = FALSE, timeout = NULL) ",
		"solve" : "solve(a, b, ...) ",
		"solve.default" : "solve.default(a, b, tol = .Machine$double.eps, LINPACK = FALSE, ...) ",
		"solve.qr" : "solve.qr(a, b, ...) ",
		"sort" : "sort(x, decreasing = FALSE, ...) ",
		"sort.default" : "sort.default(x, decreasing = FALSE, na.last = NA, ...) ",
		"sort.int" : "sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE, method = c(\"shell\", \"quick\", \"radix\"), index.return = FALSE) ",
		"sort.list" : "sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE, method = c(\"shell\", \"quick\", \"radix\")) ",
		"sort.POSIXlt" : "sort.POSIXlt(x, decreasing = FALSE, na.last = NA, ...) ",
		"source" : "source(file, local = FALSE, echo = verbose, print.eval = echo, verbose = getOption(\"verbose\"), prompt.echo = getOption(\"prompt\"), max.deparse.length = 150, chdir = FALSE, encoding = getOption(\"encoding\"), continue.echo = getOption(\"continue\"), skip.echo = 0, keep.source = getOption(\"keep.source\")) ",
		"split" : "split(x, f, drop = FALSE, ...) ",
		"split.data.frame" : "split.data.frame(x, f, drop = FALSE, ...) ",
		"split.Date" : "split.Date(x, f, drop = FALSE, ...) ",
		"split.default" : "split.default(x, f, drop = FALSE, sep = \".\", ...) ",
		"split.POSIXct" : "split.POSIXct(x, f, drop = FALSE, ...) ",
		"sprintf" : "sprintf(fmt, ...) ",
		"sqrt" : "sqrt(x) ",
		"sQuote" : "sQuote(x) ",
		"srcfile" : "srcfile(filename, encoding = getOption(\"encoding\"), Enc = \"unknown\") ",
		"srcfilealias" : "srcfilealias(filename, srcfile) ",
		"srcfilecopy" : "srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE) ",
		"srcref" : "srcref(srcfile, lloc) ",
		"standardGeneric" : "standardGeneric(f, fdef) ",
		"startsWith" : "startsWith(x, prefix) ",
		"stderr" : "stderr() ",
		"stdin" : "stdin() ",
		"stdout" : "stdout() ",
		"stop" : "stop(..., call. = TRUE, domain = NULL) ",
		"stopifnot" : "stopifnot(...) ",
		"storage.mode" : "storage.mode(x) ",
		"strftime" : "strftime(x, format = \"\", tz = \"\", usetz = FALSE, ...) ",
		"strptime" : "strptime(x, format, tz = \"\") ",
		"strrep" : "strrep(x, times) ",
		"strsplit" : "strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) ",
		"strtoi" : "strtoi(x, base = 0L) ",
		"strtrim" : "strtrim(x, width) ",
		"structure" : "structure(.Data, ...) ",
		"strwrap" : "strwrap(x, width = 0.9 * getOption(\"width\"), indent = 0, exdent = 0, prefix = \"\", simplify = TRUE, initial = prefix) ",
		"sub" : "sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"subset" : "subset(x, ...) ",
		"subset.data.frame" : "subset.data.frame(x, subset, select, drop = FALSE, ...) ",
		"subset.default" : "subset.default(x, subset, ...) ",
		"subset.matrix" : "subset.matrix(x, subset, select, drop = FALSE, ...) ",
		"substitute" : "substitute(expr, env) ",
		"substr" : "substr(x, start, stop) ",
		"substring" : "substring(text, first, last = 1000000L) ",
		"sum" : "sum(..., na.rm = FALSE) ",
		"summary" : "summary(object, ...) ",
		"summary.connection" : "summary.connection(object, ...) ",
		"summary.data.frame" : "summary.data.frame(object, maxsum = 7L, digits = max(3L, getOption(\"digits\") - 3L), ...) ",
		"Summary.data.frame" : "Summary.data.frame(..., na.rm) ",
		"summary.Date" : "summary.Date(object, digits = 12L, ...) ",
		"Summary.Date" : "Summary.Date(..., na.rm) ",
		"summary.default" : "summary.default(object, ..., digits = max(3L, getOption(\"digits\") - 3L)) ",
		"Summary.difftime" : "Summary.difftime(..., na.rm) ",
		"summary.factor" : "summary.factor(object, maxsum = 100, ...) ",
		"Summary.factor" : "Summary.factor(..., na.rm) ",
		"summary.matrix" : "summary.matrix(object, ...) ",
		"Summary.numeric_version" : "Summary.numeric_version(..., na.rm) ",
		"Summary.ordered" : "Summary.ordered(..., na.rm) ",
		"summary.POSIXct" : "summary.POSIXct(object, digits = 15L, ...) ",
		"Summary.POSIXct" : "Summary.POSIXct(..., na.rm) ",
		"summary.POSIXlt" : "summary.POSIXlt(object, digits = 15, ...) ",
		"Summary.POSIXlt" : "Summary.POSIXlt(..., na.rm) ",
		"summary.proc_time" : "summary.proc_time(object, ...) ",
		"summary.srcfile" : "summary.srcfile(object, ...) ",
		"summary.srcref" : "summary.srcref(object, useSource = FALSE, ...) ",
		"summary.table" : "summary.table(object, ...) ",
		"suppressMessages" : "suppressMessages(expr) ",
		"suppressPackageStartupMessages" : "suppressPackageStartupMessages(expr) ",
		"suppressWarnings" : "suppressWarnings(expr) ",
		"svd" : "svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE) ",
		"sweep" : "sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...) ",
		"switch" : "switch(EXPR, ...) ",
		"sys.call" : "sys.call(which = 0L) ",
		"sys.calls" : "sys.calls() ",
		"Sys.chmod" : "Sys.chmod(paths, mode = \"0777\", use_umask = TRUE) ",
		"Sys.Date" : "Sys.Date() ",
		"sys.frame" : "sys.frame(which = 0L) ",
		"sys.frames" : "sys.frames() ",
		"sys.function" : "sys.function(which = 0L) ",
		"Sys.getenv" : "Sys.getenv(x = NULL, unset = \"\", names = NA) ",
		"Sys.getlocale" : "Sys.getlocale(category = \"LC_ALL\") ",
		"Sys.getpid" : "Sys.getpid() ",
		"Sys.glob" : "Sys.glob(paths, dirmark = FALSE) ",
		"Sys.info" : "Sys.info() ",
		"sys.load.image" : "sys.load.image(name, quiet) ",
		"Sys.localeconv" : "Sys.localeconv() ",
		"sys.nframe" : "sys.nframe() ",
		"sys.on.exit" : "sys.on.exit() ",
		"sys.parent" : "sys.parent(n = 1L) ",
		"sys.parents" : "sys.parents() ",
		"Sys.readlink" : "Sys.readlink(paths) ",
		"sys.save.image" : "sys.save.image(name) ",
		"Sys.setenv" : "Sys.setenv(...) ",
		"Sys.setFileTime" : "Sys.setFileTime(path, time) ",
		"Sys.setlocale" : "Sys.setlocale(category = \"LC_ALL\", locale = \"\") ",
		"Sys.sleep" : "Sys.sleep(time) ",
		"sys.source" : "sys.source(file, envir = baseenv(), chdir = FALSE, keep.source = getOption(\"keep.source.pkgs\")) ",
		"sys.status" : "sys.status() ",
		"Sys.time" : "Sys.time() ",
		"Sys.timezone" : "Sys.timezone(location = TRUE) ",
		"Sys.umask" : "Sys.umask(mode = NA) ",
		"Sys.unsetenv" : "Sys.unsetenv(x) ",
		"Sys.which" : "Sys.which(names) ",
		"system" : "system(command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE, wait = TRUE, input = NULL, show.output.on.console = TRUE, minimized = FALSE, invisible = TRUE) ",
		"system.file" : "system.file(..., package = \"base\", lib.loc = NULL, mustWork = FALSE) ",
		"system.time" : "system.time(expr, gcFirst = TRUE) ",
		"system2" : "system2(command, args = character(), stdout = \"\", stderr = \"\", stdin = \"\", input = NULL, env = character(), wait = TRUE, minimized = FALSE, invisible = TRUE) ",
		"t.data.frame" : "t.data.frame(x) ",
		"t.default" : "t.default(x) ",
		"table" : "table(..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\", \"ifany\", \"always\"), dnn = list.names(...), deparse.level = 1) ",
		"tabulate" : "tabulate(bin, nbins = max(1L, bin, na.rm = TRUE)) ",
		"tan" : "tan(x) ",
		"tanh" : "tanh(x) ",
		"tanpi" : "tanpi(x) ",
		"tapply" : "tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE) ",
		"taskCallbackManager" : "taskCallbackManager(handlers = list(), registered = FALSE, verbose = FALSE) ",
		"tcrossprod" : "tcrossprod(x, y = NULL) ",
		"tempdir" : "tempdir() ",
		"tempfile" : "tempfile(pattern = \"file\", tmpdir = tempdir(), fileext = \"\") ",
		"testPlatformEquivalence" : "testPlatformEquivalence(built, run) ",
		"textConnection" : "textConnection(object, open = \"r\", local = FALSE, encoding = c(\"\", \"bytes\", \"UTF-8\")) ",
		"textConnectionValue" : "textConnectionValue(con) ",
		"tolower" : "tolower(x) ",
		"topenv" : "topenv(envir = parent.frame(), matchThisEnv = getOption(\"topLevelEnvironment\")) ",
		"toString" : "toString(x, ...) ",
		"toString.default" : "toString.default(x, width = NULL, ...) ",
		"toupper" : "toupper(x) ",
		"trace" : "trace(what, tracer, exit, at, print, signature, where = topenv(parent.frame()), edit = FALSE) ",
		"traceback" : "traceback(x = NULL, max.lines = getOption(\"deparse.max.lines\")) ",
		"tracemem" : "tracemem(x) ",
		"tracingState" : "tracingState(on = NULL) ",
		"transform" : "transform(`_data`, ...) ",
		"transform.data.frame" : "transform.data.frame(`_data`, ...) ",
		"transform.default" : "transform.default(`_data`, ...) ",
		"trigamma" : "trigamma(x) ",
		"trimws" : "trimws(x, which = c(\"both\", \"left\", \"right\")) ",
		"trunc" : "trunc(x, ...) ",
		"trunc.Date" : "trunc.Date(x, ...) ",
		"trunc.POSIXt" : "trunc.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\"), ...) ",
		"truncate" : "truncate(con, ...) ",
		"truncate.connection" : "truncate.connection(con, ...) ",
		"try" : "try(expr, silent = FALSE) ",
		"tryCatch" : "tryCatch(expr, ..., finally) ",
		"typeof" : "typeof(x) ",
		"unclass" : "unclass(x) ",
		"undebug" : "undebug(fun) ",
		"union" : "union(x, y) ",
		"unique" : "unique(x, incomparables = FALSE, ...) ",
		"unique.array" : "unique.array(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ...) ",
		"unique.data.frame" : "unique.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
		"unique.default" : "unique.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ...) ",
		"unique.matrix" : "unique.matrix(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ...) ",
		"unique.numeric_version" : "unique.numeric_version(x, incomparables = FALSE, ...) ",
		"unique.POSIXlt" : "unique.POSIXlt(x, incomparables = FALSE, ...) ",
		"unique.warnings" : "unique.warnings(x, incomparables = FALSE, ...) ",
		"units" : "units(x) ",
		"units.difftime" : "units.difftime(x) ",
		"unix.time" : "unix.time(expr, gcFirst = TRUE) ",
		"unlink" : "unlink(x, recursive = FALSE, force = FALSE) ",
		"unlist" : "unlist(x, recursive = TRUE, use.names = TRUE) ",
		"unloadNamespace" : "unloadNamespace(ns) ",
		"unlockBinding" : "unlockBinding(sym, env) ",
		"unname" : "unname(obj, force = FALSE) ",
		"unserialize" : "unserialize(connection, refhook = NULL) ",
		"unsplit" : "unsplit(value, f, drop = FALSE) ",
		"untrace" : "untrace(what, signature = NULL, where = topenv(parent.frame())) ",
		"untracemem" : "untracemem(x) ",
		"unz" : "unz(description, filename, open = \"\", encoding = getOption(\"encoding\")) ",
		"upper.tri" : "upper.tri(x, diag = FALSE) ",
		"url" : "url(description, open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"), method = getOption(\"url.method\", \"default\")) ",
		"UseMethod" : "UseMethod(generic, object) ",
		"utf8ToInt" : "utf8ToInt(x) ",
		"validEnc" : "validEnc(x) ",
		"validUTF8" : "validUTF8(x) ",
		"vapply" : "vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE) ",
		"vector" : "vector(mode = \"logical\", length = 0L) ",
		"Vectorize" : "Vectorize(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE, USE.NAMES = TRUE) ",
		"warning" : "warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE, domain = NULL) ",
		"warnings" : "warnings(...) ",
		"weekdays" : "weekdays(x, abbreviate) ",
		"weekdays.Date" : "weekdays.Date(x, abbreviate = FALSE) ",
		"weekdays.POSIXt" : "weekdays.POSIXt(x, abbreviate = FALSE) ",
		"which" : "which(x, arr.ind = FALSE, useNames = TRUE) ",
		"which.max" : "which.max(x) ",
		"which.min" : "which.min(x) ",
		"with" : "with(data, expr, ...) ",
		"with.default" : "with.default(data, expr, ...) ",
		"withCallingHandlers" : "withCallingHandlers(expr, ...) ",
		"within" : "within(data, expr, ...) ",
		"within.data.frame" : "within.data.frame(data, expr, ...) ",
		"within.list" : "within.list(data, expr, ...) ",
		"withRestarts" : "withRestarts(expr, ...) ",
		"withVisible" : "withVisible(x) ",
		"write" : "write(x, file = \"data\", ncolumns = if (is.character(x)) 1 else 5, append = FALSE, sep = \" \") ",
		"write.dcf" : "write.dcf(x, file = \"\", append = FALSE, indent = 0.1 * getOption(\"width\"), width = 0.9 * getOption(\"width\"), keep.white = NULL) ",
		"writeBin" : "writeBin(object, con, size = NA_integer_, endian = .Platform$endian, useBytes = FALSE) ",
		"writeChar" : "writeChar(object, con, nchars = nchar(object, type = \"chars\"), eos = \"\", useBytes = FALSE) ",
		"writeLines" : "writeLines(text, con = stdout(), sep = \"\\n\", useBytes = FALSE) ",
		"xor" : "xor(x, y) ",
		"xor.hexmode" : "xor.hexmode(a, b) ",
		"xor.octmode" : "xor.octmode(a, b) ",
		"xpdrows.data.frame" : "xpdrows.data.frame(x, old.rows, new.rows) ",
		"xtfrm" : "xtfrm(x) ",
		"xtfrm.AsIs" : "xtfrm.AsIs(x) ",
		"xtfrm.Date" : "xtfrm.Date(x) ",
		"xtfrm.default" : "xtfrm.default(x) ",
		"xtfrm.difftime" : "xtfrm.difftime(x) ",
		"xtfrm.factor" : "xtfrm.factor(x) ",
		"xtfrm.numeric_version" : "xtfrm.numeric_version(x) ",
		"xtfrm.POSIXct" : "xtfrm.POSIXct(x) ",
		"xtfrm.POSIXlt" : "xtfrm.POSIXlt(x) ",
		"xtfrm.Surv" : "xtfrm.Surv(x) ",
		"xzfile" : "xzfile(description, open = \"\", encoding = getOption(\"encoding\"), compression = 6) ",
		"zapsmall" : "zapsmall(x, digits = getOption(\"digits\")) "
	}
}