{
	"objects" : [
		"Arabidopsis",
		"bootMer",
		"cake",
		"cbpp",
		"confint.merMod",
		"cov2sdcor",
		"Cv_to_Sv",
		"Cv_to_Vv",
		"devcomp",
		"dummy",
		"Dyestuff",
		"Dyestuff2",
		"expandDoubleVerts",
		"factorize",
		"findbars",
		"fixef",
		"formatVC",
		"fortify.merMod",
		"getL",
		"getME",
		"GHrule",
		"glFormula",
		"glmer",
		"glmer.nb",
		"glmerControl",
		"glmerLaplaceHandle",
		"glmFamily",
		"glmResp",
		"golden",
		"GQdk",
		"GQN",
		"grouseticks",
		"grouseticks_agg",
		"InstEval",
		"isGLMM",
		"isLMM",
		"isNested",
		"isNLMM",
		"isREML",
		"lFormula",
		"llikAIC",
		"lmer",
		"lmerControl",
		"lmerResp",
		"lmList",
		"lmResp",
		"logProf",
		"merPredD",
		"methTitle",
		"mkDataTemplate",
		"mkGlmerDevfun",
		"mkLmerDevfun",
		"mkMerMod",
		"mkParsTemplate",
		"mkRespMod",
		"mkReTrms",
		"mkVarCorr",
		"mlist2vec",
		"negative.binomial",
		"Nelder_Mead",
		"NelderMead",
		"ngrps",
		"nlformula",
		"nlmer",
		"nlmerControl",
		"nloptwrap",
		"nlsResp",
		"nobars",
		"optimizeGlmer",
		"optimizeLmer",
		"Pastes",
		"Penicillin",
		"ranef",
		"refit",
		"refitML",
		"REMLcrit",
		"rePos",
		"sdcor2cov",
		"show",
		"sleepstudy",
		"subbars",
		"Sv_to_Cv",
		"updateGlmerDevfun",
		"VarCorr",
		"varianceProf",
		"vcov.merMod",
		"vec2mlist",
		"vec2STlist",
		"VerbAgg",
		"Vv_to_Cv"
	],
	"methods" : {
		"bootMer" : "bootMer(x, FUN, nsim = 1, seed = NULL, use.u = FALSE, re.form = NA, type = c(\"parametric\", \"semiparametric\"), verbose = FALSE, .progress = \"none\", PBargs = list(), parallel = c(\"no\", \"multicore\",     \"snow\"), ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL) ",
		"confint.merMod" : "confint.merMod(object, parm, level = 0.95, method = c(\"profile\", \"Wald\", \"boot\"), zeta, nsim = 500, boot.type = c(\"perc\", \"basic\", \"norm\"), FUN = NULL, quiet = FALSE, oldNames = TRUE, ...) ",
		"cov2sdcor" : "cov2sdcor(V) ",
		"Cv_to_Sv" : "Cv_to_Sv(v, n = NULL, s = 1) ",
		"Cv_to_Vv" : "Cv_to_Vv(v, n = NULL, s = 1) ",
		"devcomp" : "devcomp(x) ",
		"dummy" : "dummy(f, levelsToKeep) ",
		"expandDoubleVerts" : "expandDoubleVerts(term) ",
		"factorize" : "factorize(x, frloc, char.only = FALSE) ",
		"findbars" : "findbars(term) ",
		"fixef" : "fixef(object, ...) ",
		"formatVC" : "formatVC(varcor, digits = max(3, getOption(\"digits\") - 2), comp = \"Std.Dev.\", formatter = format, useScale = attr(varcor, \"useSc\"), ...) ",
		"fortify.merMod" : "fortify.merMod(model, data = getData(model), ...) ",
		"getL" : "getL(x) ",
		"getME" : "getME(object, name, ...) ",
		"GHrule" : "GHrule(ord, asMatrix = TRUE) ",
		"glFormula" : "glFormula(formula, data = NULL, family = gaussian, subset, weights, na.action, offset, contrasts = NULL, mustart, etastart, control = glmerControl(), ...) ",
		"glmer" : "glmer(formula, data = NULL, family = gaussian, control = glmerControl(), start = NULL, verbose = 0L, nAGQ = 1L, subset, weights, na.action, offset, contrasts = NULL, mustart, etastart, devFunOnly = FALSE, ...) ",
		"glmer.nb" : "glmer.nb(..., interval = log(th) + c(-3, 3), tol = 5e-05, verbose = FALSE, nb.control = NULL, initCtrl = list(limit = 20, eps = 2 *     tol, trace = verbose)) ",
		"glmerControl" : "glmerControl(optimizer = c(\"bobyqa\", \"Nelder_Mead\"), restart_edge = FALSE, boundary.tol = 1e-05, calc.derivs = TRUE, use.last.params = FALSE, sparseX = FALSE, tolPwrss = 1e-07, compDev = TRUE, nAGQ0initStep = TRUE, check.nobs.vs.rankZ = \"ignore\", check.nobs.vs.nlev = \"stop\", check.nlev.gtreq.5 = \"ignore\", check.nlev.gtr.1 = \"stop\", check.nobs.vs.nRE = \"stop\", check.rankX = c(\"message+drop.cols\",     \"silent.drop.cols\", \"warn+drop.cols\", \"stop.deficient\",     \"ignore\"), check.scaleX = \"warning\", check.formula.LHS = \"stop\", check.response.not.const = \"stop\", check.conv.grad = .makeCC(\"warning\",     tol = 0.001, relTol = NULL), check.conv.singular = .makeCC(action = \"ignore\",     tol = 1e-04), check.conv.hess = .makeCC(action = \"warning\",     tol = 1e-06), optCtrl = list()) ",
		"glmerLaplaceHandle" : "glmerLaplaceHandle(pp, resp, nAGQ, tol, maxit, verbose) ",
		"glmFamily" : "glmFamily(...) ",
		"glmResp" : "glmResp(...) ",
		"golden" : "golden(...) ",
		"GQdk" : "GQdk(d = 1L, k = 1L) ",
		"isGLMM" : "isGLMM(x, ...) ",
		"isLMM" : "isLMM(x, ...) ",
		"isNested" : "isNested(f1, f2) ",
		"isNLMM" : "isNLMM(x, ...) ",
		"isREML" : "isREML(x, ...) ",
		"lFormula" : "lFormula(formula, data = NULL, REML = TRUE, subset, weights, na.action, offset, contrasts = NULL, control = lmerControl(), ...) ",
		"llikAIC" : "llikAIC(object, devianceFUN = devCrit, chkREML = TRUE, devcomp = object@devcomp) ",
		"lmer" : "lmer(formula, data = NULL, REML = TRUE, control = lmerControl(), start = NULL, verbose = 0L, subset, weights, na.action, offset, contrasts = NULL, devFunOnly = FALSE, ...) ",
		"lmerControl" : "lmerControl(optimizer = \"bobyqa\", restart_edge = TRUE, boundary.tol = 1e-05, calc.derivs = TRUE, use.last.params = FALSE, sparseX = FALSE, check.nobs.vs.rankZ = \"ignore\", check.nobs.vs.nlev = \"stop\", check.nlev.gtreq.5 = \"ignore\", check.nlev.gtr.1 = \"stop\", check.nobs.vs.nRE = \"stop\", check.rankX = c(\"message+drop.cols\",     \"silent.drop.cols\", \"warn+drop.cols\", \"stop.deficient\",     \"ignore\"), check.scaleX = c(\"warning\", \"stop\", \"silent.rescale\",     \"message+rescale\", \"warn+rescale\", \"ignore\"), check.formula.LHS = \"stop\", check.conv.grad = .makeCC(\"warning\", tol = 0.002, relTol = NULL), check.conv.singular = .makeCC(action = \"ignore\", tol = 1e-04), check.conv.hess = .makeCC(action = \"warning\", tol = 1e-06), optCtrl = list()) ",
		"lmerResp" : "lmerResp(...) ",
		"lmList" : "lmList(formula, data, family, subset, weights, na.action, offset, pool = TRUE, ...) ",
		"lmResp" : "lmResp(...) ",
		"logProf" : "logProf(x, base = exp(1), ranef = TRUE, sigIni = if (ranef) \"sig\" else \"sigma\") ",
		"merPredD" : "merPredD(...) ",
		"methTitle" : "methTitle(dims) ",
		"mkDataTemplate" : "mkDataTemplate(formula, data, nGrps = 2, nPerGrp = 1, rfunc = NULL, ...) ",
		"mkGlmerDevfun" : "mkGlmerDevfun(fr, X, reTrms, family, nAGQ = 1L, verbose = 0L, maxit = 100L, control = glmerControl(), ...) ",
		"mkLmerDevfun" : "mkLmerDevfun(fr, X, reTrms, REML = TRUE, start = NULL, verbose = 0, control = lmerControl(), ...) ",
		"mkMerMod" : "mkMerMod(rho, opt, reTrms, fr, mc, lme4conv = NULL) ",
		"mkParsTemplate" : "mkParsTemplate(formula, data) ",
		"mkRespMod" : "mkRespMod(fr, REML = NULL, family = NULL, nlenv = NULL, nlmod = NULL, ...) ",
		"mkReTrms" : "mkReTrms(bars, fr, drop.unused.levels = TRUE) ",
		"mkVarCorr" : "mkVarCorr(sc, cnms, nc, theta, nms) ",
		"mlist2vec" : "mlist2vec(L) ",
		"negative.binomial" : "negative.binomial(theta = stop(\"'theta' must be specified\"), link = \"log\") ",
		"Nelder_Mead" : "Nelder_Mead(fn, par, lower = rep.int(-Inf, n), upper = rep.int(Inf, n), control = list()) ",
		"NelderMead" : "NelderMead(...) ",
		"ngrps" : "ngrps(object, ...) ",
		"nlformula" : "nlformula(mc) ",
		"nlmer" : "nlmer(formula, data = NULL, control = nlmerControl(), start = NULL, verbose = 0L, nAGQ = 1L, subset, weights, na.action, offset, contrasts = NULL, devFunOnly = FALSE, ...) ",
		"nlmerControl" : "nlmerControl(optimizer = \"Nelder_Mead\", tolPwrss = 1e-10, optCtrl = list()) ",
		"nloptwrap" : "nloptwrap(par, fn, lower, upper, control = list(), ...) ",
		"nlsResp" : "nlsResp(...) ",
		"nobars" : "nobars(term) ",
		"optimizeGlmer" : "optimizeGlmer(devfun, optimizer = \"bobyqa\", restart_edge = FALSE, boundary.tol = formals(glmerControl)$boundary.tol, verbose = 0L, control = list(), nAGQ = 1L, stage = 1, start = NULL, ...) ",
		"optimizeLmer" : "optimizeLmer(devfun, optimizer = formals(lmerControl)$optimizer, restart_edge = formals(lmerControl)$restart_edge, boundary.tol = formals(lmerControl)$boundary.tol, start = NULL, verbose = 0L, control = list(), ...) ",
		"ranef" : "ranef(object, ...) ",
		"refit" : "refit(object, newresp, ...) ",
		"refitML" : "refitML(x, ...) ",
		"REMLcrit" : "REMLcrit(object) ",
		"rePos" : "rePos(...) ",
		"sdcor2cov" : "sdcor2cov(m) ",
		"show" : "show(object) ",
		"subbars" : "subbars(term) ",
		"Sv_to_Cv" : "Sv_to_Cv(v, n = NULL, s = 1) ",
		"updateGlmerDevfun" : "updateGlmerDevfun(devfun, reTrms, nAGQ = 1L) ",
		"VarCorr" : "VarCorr(x, sigma = 1, ...) ",
		"varianceProf" : "varianceProf(x, ranef = TRUE) ",
		"vcov.merMod" : "vcov.merMod(object, correlation = TRUE, sigm = sigma(object), use.hessian = NULL, ...) ",
		"vec2mlist" : "vec2mlist(v, n = NULL, symm = TRUE) ",
		"vec2STlist" : "vec2STlist(v, n = NULL) ",
		"Vv_to_Cv" : "Vv_to_Cv(v, n = NULL, s = 1) "
	}
}