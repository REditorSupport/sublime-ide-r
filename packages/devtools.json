{
	"objects" : [
		"add_path",
		"as.package",
		"bash",
		"build",
		"build_github_devtools",
		"build_vignettes",
		"build_win",
		"check",
		"check_built",
		"check_cran",
		"check_failures",
		"check_man",
		"clean_dll",
		"clean_source",
		"clean_vignettes",
		"compile_dll",
		"compiler_flags",
		"create",
		"create_description",
		"dev_example",
		"dev_help",
		"dev_meta",
		"dev_mode",
		"dev_package_deps",
		"dev_packages",
		"devtest",
		"document",
		"dr_devtools",
		"dr_github",
		"eval_clean",
		"evalq_clean",
		"find_rtools",
		"find_topic",
		"get_path",
		"github_pat",
		"github_pull",
		"github_release",
		"has_devel",
		"has_tests",
		"imports_env",
		"in_dir",
		"inst",
		"install",
		"install_bioc",
		"install_bitbucket",
		"install_cran",
		"install_deps",
		"install_dev_deps",
		"install_git",
		"install_github",
		"install_local",
		"install_svn",
		"install_url",
		"install_version",
		"is.package",
		"lint",
		"load_all",
		"load_code",
		"load_data",
		"load_dll",
		"loaded_packages",
		"missing_s3",
		"ns_env",
		"on_path",
		"package_deps",
		"package_file",
		"parse_deps",
		"parse_ns_file",
		"pkg_env",
		"r_env_vars",
		"RCMD",
		"release",
		"release_checks",
		"reload",
		"revdep",
		"revdep_check",
		"revdep_check_print_problems",
		"revdep_check_reset",
		"revdep_check_resume",
		"revdep_check_save_summary",
		"revdep_email",
		"revdep_maintainers",
		"run_examples",
		"session_info",
		"set_path",
		"setup",
		"setup_rtools",
		"show_news",
		"source_gist",
		"source_url",
		"spell_check",
		"submit_cran",
		"system_check",
		"system_output",
		"test",
		"uninstall",
		"unload",
		"update_packages",
		"use_appveyor",
		"use_build_ignore",
		"use_code_of_conduct",
		"use_coverage",
		"use_cran_badge",
		"use_cran_comments",
		"use_data",
		"use_data_raw",
		"use_dev_version",
		"use_git",
		"use_git_hook",
		"use_github",
		"use_github_links",
		"use_mit_license",
		"use_news_md",
		"use_package",
		"use_package_doc",
		"use_rcpp",
		"use_readme_md",
		"use_readme_rmd",
		"use_revdep",
		"use_rstudio",
		"use_test",
		"use_testthat",
		"use_travis",
		"use_vignette",
		"uses_testthat",
		"wd",
		"with_collate",
		"with_debug",
		"with_envvar",
		"with_lib",
		"with_libpaths",
		"with_locale",
		"with_makevars",
		"with_options",
		"with_par",
		"with_path"
	],
	"methods" : {
		"add_path" : "add_path(path, after = Inf) ",
		"as.package" : "as.package(x = NULL, create = NA) ",
		"bash" : "bash(pkg = \".\") ",
		"build" : "build(pkg = \".\", path = NULL, binary = FALSE, vignettes = TRUE, manual = FALSE, args = NULL, quiet = FALSE) ",
		"build_github_devtools" : "build_github_devtools(outfile = NULL) ",
		"build_vignettes" : "build_vignettes(pkg = \".\", dependencies = \"VignetteBuilder\") ",
		"build_win" : "build_win(pkg = \".\", version = c(\"R-release\", \"R-devel\"), args = NULL, quiet = FALSE) ",
		"check" : "check(pkg = \".\", document = TRUE, build_args = NULL, ..., manual = FALSE, cran = TRUE, check_version = FALSE, force_suggests = FALSE, run_dont_test = FALSE, args = NULL, env_vars = NULL, quiet = FALSE, check_dir = tempdir(), cleanup = TRUE) ",
		"check_built" : "check_built(path = NULL, cran = TRUE, check_version = FALSE, force_suggests = FALSE, run_dont_test = FALSE, manual = FALSE, args = NULL, env_vars = NULL, check_dir = tempdir(), quiet = FALSE) ",
		"check_cran" : "check_cran(pkgs, libpath = file.path(tempdir(), \"R-lib\"), srcpath = libpath, bioconductor = FALSE, type = getOption(\"pkgType\"), threads = getOption(\"Ncpus\",     1), check_dir = tempfile(\"check_cran\"), env_vars = NULL) ",
		"check_failures" : "check_failures(path, error = TRUE, warning = TRUE, note = TRUE) ",
		"check_man" : "check_man(pkg = \".\") ",
		"clean_dll" : "clean_dll(pkg = \".\") ",
		"clean_source" : "clean_source(path, quiet = FALSE) ",
		"clean_vignettes" : "clean_vignettes(pkg = \".\") ",
		"compile_dll" : "compile_dll(pkg = \".\", quiet = FALSE) ",
		"compiler_flags" : "compiler_flags(debug = FALSE) ",
		"create" : "create(path, description = getOption(\"devtools.desc\"), check = FALSE, rstudio = TRUE) ",
		"create_description" : "create_description(path = \".\", extra = getOption(\"devtools.desc\"), quiet = FALSE) ",
		"dev_example" : "dev_example(topic) ",
		"dev_help" : "dev_help(topic, stage = \"render\", type = getOption(\"help_type\")) ",
		"dev_meta" : "dev_meta(name) ",
		"dev_mode" : "dev_mode(on = NULL, path = getOption(\"devtools.path\")) ",
		"dev_package_deps" : "dev_package_deps(pkg = \".\", dependencies = NA, repos = getOption(\"repos\"), type = getOption(\"pkgType\")) ",
		"dev_packages" : "dev_packages() ",
		"devtest" : "devtest(package) ",
		"document" : "document(pkg = \".\", clean = NULL, roclets = NULL, reload = TRUE) ",
		"dr_devtools" : "dr_devtools() ",
		"dr_github" : "dr_github(path = \".\") ",
		"eval_clean" : "eval_clean(expr, quiet = TRUE) ",
		"evalq_clean" : "evalq_clean(expr, quiet = TRUE) ",
		"find_rtools" : "find_rtools(cache = TRUE, debug = FALSE) ",
		"find_topic" : "find_topic(topic) ",
		"get_path" : "get_path() ",
		"github_pat" : "github_pat(quiet = FALSE) ",
		"github_pull" : "github_pull(pull) ",
		"github_release" : "github_release() ",
		"has_devel" : "has_devel() ",
		"has_tests" : "has_tests() ",
		"imports_env" : "imports_env(pkg = \".\") ",
		"in_dir" : "in_dir(new, code) ",
		"inst" : "inst(name) ",
		"install" : "install(pkg = \".\", reload = TRUE, quick = FALSE, local = TRUE, args = getOption(\"devtools.install.args\"), quiet = FALSE, dependencies = NA, upgrade_dependencies = TRUE, build_vignettes = FALSE, keep_source = getOption(\"keep.source.pkgs\"), threads = getOption(\"Ncpus\",     1), force_deps = FALSE, metadata = remote_metadata(as.package(pkg)), ...) ",
		"install_bioc" : "install_bioc(repo, mirror = getOption(\"BioC_svn\", \"https://hedgehog.fhcrc.org/bioconductor\"), ...) ",
		"install_bitbucket" : "install_bitbucket(repo, username, ref = \"master\", subdir = NULL, auth_user = NULL, password = NULL, ...) ",
		"install_cran" : "install_cran(pkgs, repos = getOption(\"repos\"), type = getOption(\"pkgType\"), ..., quiet = FALSE) ",
		"install_deps" : "install_deps(pkg = \".\", dependencies = NA, threads = getOption(\"Ncpus\", 1), repos = getOption(\"repos\"), type = getOption(\"pkgType\"), ..., upgrade = TRUE, quiet = FALSE, force_deps = FALSE) ",
		"install_dev_deps" : "install_dev_deps(pkg = \".\", ...) ",
		"install_git" : "install_git(url, subdir = NULL, branch = NULL, credentials = NULL, args = character(0), ...) ",
		"install_github" : "install_github(repo, username = NULL, ref = \"master\", subdir = NULL, auth_token = github_pat(quiet), host = \"https://api.github.com\", quiet = FALSE, ...) ",
		"install_local" : "install_local(path, subdir = NULL, ...) ",
		"install_svn" : "install_svn(url, subdir = NULL, branch = NULL, args = character(0), ..., revision = NULL) ",
		"install_url" : "install_url(url, subdir = NULL, config = list(), ...) ",
		"install_version" : "install_version(package, version = NULL, repos = getOption(\"repos\"), type = getOption(\"pkgType\"), ...) ",
		"is.package" : "is.package(x) ",
		"lint" : "lint(pkg = \".\", cache = TRUE, ...) ",
		"load_all" : "load_all(pkg = \".\", reset = TRUE, recompile = FALSE, export_all = TRUE, quiet = FALSE, create = NA) ",
		"load_code" : "load_code(pkg = \".\") ",
		"load_data" : "load_data(pkg = \".\") ",
		"load_dll" : "load_dll(pkg = \".\") ",
		"loaded_packages" : "loaded_packages() ",
		"missing_s3" : "missing_s3(pkg = \".\") ",
		"ns_env" : "ns_env(pkg = \".\") ",
		"on_path" : "on_path(...) ",
		"package_deps" : "package_deps(pkg, dependencies = NA, repos = getOption(\"repos\"), type = getOption(\"pkgType\")) ",
		"package_file" : "package_file(..., path = \".\") ",
		"parse_deps" : "parse_deps(string) ",
		"parse_ns_file" : "parse_ns_file(pkg = \".\") ",
		"pkg_env" : "pkg_env(pkg = \".\") ",
		"r_env_vars" : "r_env_vars() ",
		"RCMD" : "RCMD(cmd, options, path = tempdir(), env_vars = character(), ...) ",
		"release" : "release(pkg = \".\", check = TRUE, args = NULL) ",
		"release_checks" : "release_checks(pkg = \".\", built_path = NULL) ",
		"reload" : "reload(pkg = \".\", quiet = FALSE) ",
		"revdep" : "revdep(pkg, dependencies = c(\"Depends\", \"Imports\", \"Suggests\", \"LinkingTo\"), recursive = FALSE, ignore = NULL, bioconductor = FALSE) ",
		"revdep_check" : "revdep_check(pkg = \".\", recursive = FALSE, ignore = NULL, dependencies = c(\"Depends\", \"Imports\", \"Suggests\", \"LinkingTo\"), libpath = getOption(\"devtools.revdep.libpath\"), srcpath = libpath, bioconductor = FALSE, type = getOption(\"pkgType\"), threads = getOption(\"Ncpus\", 1), env_vars = NULL, check_dir = NULL) ",
		"revdep_check_print_problems" : "revdep_check_print_problems(pkg = \".\") ",
		"revdep_check_reset" : "revdep_check_reset(pkg = \".\") ",
		"revdep_check_resume" : "revdep_check_resume(pkg = \".\") ",
		"revdep_check_save_summary" : "revdep_check_save_summary(pkg = \".\") ",
		"revdep_email" : "revdep_email(pkg = \".\", date, author = getOption(\"devtools.name\"), draft = TRUE, unsent = NULL, template = \"revdep/email.md\", only_problems = FALSE) ",
		"revdep_maintainers" : "revdep_maintainers(pkg = \".\") ",
		"run_examples" : "run_examples(pkg = \".\", start = NULL, show = TRUE, test = FALSE, run = TRUE, fresh = FALSE) ",
		"session_info" : "session_info(pkgs = NULL, include_base = FALSE) ",
		"set_path" : "set_path(path) ",
		"setup" : "setup(path = \".\", description = getOption(\"devtools.desc\"), check = FALSE, rstudio = TRUE) ",
		"setup_rtools" : "setup_rtools(cache = TRUE, debug = FALSE) ",
		"show_news" : "show_news(pkg = \".\", latest = TRUE, ...) ",
		"source_gist" : "source_gist(id, ..., filename = NULL, sha1 = NULL, quiet = FALSE) ",
		"source_url" : "source_url(url, ..., sha1 = NULL) ",
		"spell_check" : "spell_check(pkg = \".\", ignore = character()) ",
		"submit_cran" : "submit_cran(pkg = \".\", args = NULL) ",
		"system_check" : "system_check(cmd, args = character(), env_vars = character(), path = \".\", quiet = FALSE, throw = TRUE, ...) ",
		"system_output" : "system_output(cmd, args = character(), env_vars = character(), path = \".\", quiet = FALSE, ...) ",
		"test" : "test(pkg = \".\", filter = NULL, ...) ",
		"uninstall" : "uninstall(pkg = \".\", unload = TRUE, quiet = FALSE, ...) ",
		"unload" : "unload(pkg = \".\") ",
		"update_packages" : "update_packages(pkgs = NULL, dependencies = NA, repos = getOption(\"repos\"), type = getOption(\"pkgType\")) ",
		"use_appveyor" : "use_appveyor(pkg = \".\") ",
		"use_build_ignore" : "use_build_ignore(files, escape = TRUE, pkg = \".\") ",
		"use_code_of_conduct" : "use_code_of_conduct(pkg = \".\") ",
		"use_coverage" : "use_coverage(pkg = \".\", type = c(\"codecov\", \"coveralls\")) ",
		"use_cran_badge" : "use_cran_badge(pkg = \".\") ",
		"use_cran_comments" : "use_cran_comments(pkg = \".\") ",
		"use_data" : "use_data(..., pkg = \".\", internal = FALSE, overwrite = FALSE, compress = \"bzip2\") ",
		"use_data_raw" : "use_data_raw(pkg = \".\") ",
		"use_dev_version" : "use_dev_version(pkg = \".\") ",
		"use_git" : "use_git(message = \"Initial commit\", pkg = \".\") ",
		"use_git_hook" : "use_git_hook(hook, script, pkg = \".\") ",
		"use_github" : "use_github(auth_token = github_pat(), private = FALSE, pkg = \".\", host = \"https://api.github.com\", protocol = c(\"ssh\", \"https\"), credentials = NULL) ",
		"use_github_links" : "use_github_links(pkg = \".\", auth_token = github_pat(), host = \"https://api.github.com\") ",
		"use_mit_license" : "use_mit_license(pkg = \".\", copyright_holder = getOption(\"devtools.name\", \"<Author>\")) ",
		"use_news_md" : "use_news_md(pkg = \".\") ",
		"use_package" : "use_package(package, type = \"Imports\", pkg = \".\") ",
		"use_package_doc" : "use_package_doc(pkg = \".\") ",
		"use_rcpp" : "use_rcpp(pkg = \".\") ",
		"use_readme_md" : "use_readme_md(pkg = \".\") ",
		"use_readme_rmd" : "use_readme_rmd(pkg = \".\") ",
		"use_revdep" : "use_revdep(pkg = \".\") ",
		"use_rstudio" : "use_rstudio(pkg = \".\") ",
		"use_test" : "use_test(name, pkg = \".\") ",
		"use_testthat" : "use_testthat(pkg = \".\") ",
		"use_travis" : "use_travis(pkg = \".\") ",
		"use_vignette" : "use_vignette(name, pkg = \".\") ",
		"uses_testthat" : "uses_testthat(pkg = \".\") ",
		"wd" : "wd(pkg = \".\", path = \"\") ",
		"with_collate" : "with_collate(new, code) ",
		"with_debug" : "with_debug(code, CFLAGS = NULL, CXXFLAGS = NULL, FFLAGS = NULL, FCFLAGS = NULL, debug = TRUE) ",
		"with_envvar" : "with_envvar(new, code, action = \"replace\") ",
		"with_lib" : "with_lib(new, code) ",
		"with_libpaths" : "with_libpaths(new, code) ",
		"with_locale" : "with_locale(new, code) ",
		"with_makevars" : "with_makevars(new, code, path = file.path(\"~\", \".R\", \"Makevars\")) ",
		"with_options" : "with_options(new, code) ",
		"with_par" : "with_par(new, code) ",
		"with_path" : "with_path(new, code, add = TRUE) "
	}
}