{
	"objects" : [
		"Adler",
		"AMSsurvey",
		"Angell",
		"Anova",
		"Anscombe",
		"av.plot",
		"av.plots",
		"avPlot",
		"avPlots",
		"basicPower",
		"basicPowerAxis",
		"Baumann",
		"bc",
		"bcPower",
		"bcPowerAxis",
		"Bfox",
		"Blackmore",
		"Boot",
		"bootCase",
		"box.cox",
		"box.cox.powers",
		"box.cox.var",
		"box.tidwell",
		"boxCox",
		"boxCoxVariable",
		"Boxplot",
		"boxTidwell",
		"Burt",
		"CanPop",
		"carWeb",
		"ceres.plot",
		"ceres.plots",
		"ceresPlot",
		"ceresPlots",
		"Chile",
		"Chirot",
		"compareCoefs",
		"confidence.ellipse",
		"confidenceEllipse",
		"contr.Helmert",
		"contr.Sum",
		"contr.Treatment",
		"cookd",
		"Cowles",
		"cr.plot",
		"cr.plots",
		"crp",
		"crPlot",
		"crPlots",
		"data.ellipse",
		"dataEllipse",
		"Davis",
		"DavisThin",
		"deltaMethod",
		"densityPlot",
		"Depredations",
		"dfbetaPlots",
		"dfbetasPlots",
		"Duncan",
		"durbin.watson",
		"durbinWatsonTest",
		"dwt",
		"ellipse",
		"Ericksen",
		"estimateTransform",
		"Florida",
		"Freedman",
		"Friendly",
		"gamLine",
		"Ginzberg",
		"Greene",
		"Guyer",
		"Hartnagel",
		"hccm",
		"Highway1",
		"Identify3d",
		"infIndexPlot",
		"influenceIndexPlot",
		"influencePlot",
		"inverseResponsePlot",
		"invResPlot",
		"invTranEstimate",
		"invTranPlot",
		"KosteckiDillon",
		"Leinhardt",
		"levene.test",
		"leveneTest",
		"leverage.plot",
		"leverage.plots",
		"leveragePlot",
		"leveragePlots",
		"lht",
		"linear.hypothesis",
		"linearHypothesis",
		"linearHypothesis.default",
		"LoBD",
		"loessLine",
		"logit",
		"makeHypothesis",
		"Mandel",
		"Manova",
		"marginalModelPlot",
		"marginalModelPlots",
		"matchCoefs",
		"mcPlot",
		"mcPlots",
		"Migration",
		"mmp",
		"mmps",
		"Moore",
		"Mroz",
		"ncv.test",
		"ncvTest",
		"nextBoot",
		"OBrienKaiser",
		"Ornstein",
		"outlier.test",
		"outlierTest",
		"panel.car",
		"Pottery",
		"powerTransform",
		"Prestige",
		"printHypothesis",
		"probabilityAxis",
		"qq.plot",
		"qqp",
		"qqPlot",
		"quantregLine",
		"Quartet",
		"recode",
		"Recode",
		"regLine",
		"residualPlot",
		"residualPlots",
		"Robey",
		"Sahlins",
		"Salaries",
		"scatter3d",
		"scatterplot",
		"scatterplot.matrix",
		"scatterplotMatrix",
		"showLabels",
		"sigmaHat",
		"skewPower",
		"SLID",
		"slp",
		"Soils",
		"some",
		"sp",
		"spm",
		"spread.level.plot",
		"spreadLevelPlot",
		"States",
		"subsets",
		"symbox",
		"testTransform",
		"Transact",
		"UN",
		"USPop",
		"vif",
		"Vocab",
		"wcrossprod",
		"WeightLoss",
		"which.names",
		"whichNames",
		"Womenlf",
		"Wong",
		"Wool",
		"yjPower",
		"yjPowerAxis"
	],
	"methods" : {
		"Anova" : "Anova(mod, ...) ",
		"av.plot" : "av.plot(...) ",
		"av.plots" : "av.plots(...) ",
		"avPlot" : "avPlot(model, ...) ",
		"avPlots" : "avPlots(model, terms = ~., intercept = FALSE, layout = NULL, ask, main, ...) ",
		"basicPower" : "basicPower(U, lambda, gamma = NULL) ",
		"basicPowerAxis" : "basicPowerAxis(power, base = exp(1), side = c(\"right\", \"above\", \"left\", \"below\"), at, start = 0, lead.digits = 1, n.ticks, grid = FALSE, grid.col = gray(0.5), grid.lty = 2, axis.title = \"Untransformed Data\", cex = 1, las = par(\"las\")) ",
		"bc" : "bc(...) ",
		"bcPower" : "bcPower(U, lambda, jacobian.adjusted = FALSE, gamma = NULL) ",
		"bcPowerAxis" : "bcPowerAxis(power, side = c(\"right\", \"above\", \"left\", \"below\"), at, start = 0, lead.digits = 1, n.ticks, grid = FALSE, grid.col = gray(0.5), grid.lty = 2, axis.title = \"Untransformed Data\", cex = 1, las = par(\"las\")) ",
		"Boot" : "Boot(object, f, labels, R = 999, method) ",
		"bootCase" : "bootCase(object, f. = coef, B = 999) ",
		"box.cox" : "box.cox(...) ",
		"box.cox.powers" : "box.cox.powers(...) ",
		"box.cox.var" : "box.cox.var(...) ",
		"box.tidwell" : "box.tidwell(...) ",
		"boxCox" : "boxCox(object, ...) ",
		"boxCoxVariable" : "boxCoxVariable(y) ",
		"Boxplot" : "Boxplot(y, ...) ",
		"boxTidwell" : "boxTidwell(y, ...) ",
		"carWeb" : "carWeb(page = c(\"webpage\", \"errata\", \"taskviews\"), script, data) ",
		"ceres.plot" : "ceres.plot(...) ",
		"ceres.plots" : "ceres.plots(...) ",
		"ceresPlot" : "ceresPlot(model, ...) ",
		"ceresPlots" : "ceresPlots(model, terms = ~., layout = NULL, ask, main, ...) ",
		"compareCoefs" : "compareCoefs(..., se = TRUE, print = TRUE, digits = 3) ",
		"confidence.ellipse" : "confidence.ellipse(...) ",
		"confidenceEllipse" : "confidenceEllipse(model, ...) ",
		"contr.Helmert" : "contr.Helmert(n, contrasts = TRUE) ",
		"contr.Sum" : "contr.Sum(n, contrasts = TRUE) ",
		"contr.Treatment" : "contr.Treatment(n, base = 1, contrasts = TRUE) ",
		"cookd" : "cookd(...) ",
		"cr.plot" : "cr.plot(...) ",
		"cr.plots" : "cr.plots(...) ",
		"crp" : "crp(...) ",
		"crPlot" : "crPlot(model, ...) ",
		"crPlots" : "crPlots(model, terms = ~., layout = NULL, ask, main, ...) ",
		"data.ellipse" : "data.ellipse(...) ",
		"dataEllipse" : "dataEllipse(x, y, groups, group.labels = group.levels, ellipse.label, weights, log = \"\", levels = c(0.5, 0.95), center.pch = 19, center.cex = 1.5, draw = TRUE, plot.points = draw, add = !plot.points, segments = 51, robust = FALSE, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), col = if (missing(groups)) palette()[1:2] else palette()[1:length(group.levels)], pch = if (missing(groups)) 1 else seq(group.levels), lwd = 2, fill = FALSE, fill.alpha = 0.3, grid = TRUE, labels, id.method = \"mahal\", id.n = if (id.method[1] == \"identify\") Inf else 0, id.cex = 1, id.col = if (missing(groups)) palette()[1] else palette()(1:length(groups)), id.location = \"lr\", ...) ",
		"deltaMethod" : "deltaMethod(object, ...) ",
		"densityPlot" : "densityPlot(x, ...) ",
		"dfbetaPlots" : "dfbetaPlots(model, ...) ",
		"dfbetasPlots" : "dfbetasPlots(model, ...) ",
		"durbin.watson" : "durbin.watson(...) ",
		"durbinWatsonTest" : "durbinWatsonTest(model, ...) ",
		"dwt" : "dwt(...) ",
		"ellipse" : "ellipse(center, shape, radius, log = \"\", center.pch = 19, center.cex = 1.5, segments = 51, draw = TRUE, add = draw, xlab = \"\", ylab = \"\", col = palette()[2], lwd = 2, fill = FALSE, fill.alpha = 0.3, grid = TRUE, ...) ",
		"estimateTransform" : "estimateTransform(X, Y, weights = NULL, family = \"bcPower\", start = NULL, method = \"L-BFGS-B\", ...) ",
		"gamLine" : "gamLine(x, y, col, log.x, log.y, spread = FALSE, smoother.args, draw = TRUE, offset = 0) ",
		"hccm" : "hccm(model, ...) ",
		"Identify3d" : "Identify3d(x, y, z, axis.scales = TRUE, groups = NULL, labels = 1:length(x), col = c(\"blue\", \"green\", \"orange\", \"magenta\", \"cyan\", \"red\",     \"yellow\", \"gray\"), offset = ((100/length(x))^(1/3)) *     0.02) ",
		"infIndexPlot" : "infIndexPlot(model, ...) ",
		"influenceIndexPlot" : "influenceIndexPlot(model, ...) ",
		"influencePlot" : "influencePlot(model, ...) ",
		"inverseResponsePlot" : "inverseResponsePlot(model, lambda = c(-1, 0, 1), robust = FALSE, xlab = NULL, ...) ",
		"invResPlot" : "invResPlot(model, ...) ",
		"invTranEstimate" : "invTranEstimate(x, y, family = \"bcPower\", confidence = 0.95, robust = FALSE) ",
		"invTranPlot" : "invTranPlot(x, ...) ",
		"levene.test" : "levene.test(...) ",
		"leveneTest" : "leveneTest(y, ...) ",
		"leverage.plot" : "leverage.plot(...) ",
		"leverage.plots" : "leverage.plots(...) ",
		"leveragePlot" : "leveragePlot(model, ...) ",
		"leveragePlots" : "leveragePlots(model, terms = ~., layout = NULL, ask, main, ...) ",
		"lht" : "lht(model, ...) ",
		"linear.hypothesis" : "linear.hypothesis(...) ",
		"linearHypothesis" : "linearHypothesis(model, ...) ",
		"linearHypothesis.default" : "linearHypothesis.default(model, hypothesis.matrix, rhs = NULL, test = c(\"Chisq\", \"F\"), vcov. = NULL, singular.ok = FALSE, verbose = FALSE, coef. = coef(model), ...) ",
		"loessLine" : "loessLine(x, y, col, log.x, log.y, spread = FALSE, smoother.args, draw = TRUE, offset = 0) ",
		"logit" : "logit(p, percents = range.p[2] > 1, adjust) ",
		"makeHypothesis" : "makeHypothesis(cnames, hypothesis, rhs = NULL) ",
		"Manova" : "Manova(mod, ...) ",
		"marginalModelPlot" : "marginalModelPlot(...) ",
		"marginalModelPlots" : "marginalModelPlots(...) ",
		"matchCoefs" : "matchCoefs(model, pattern, ...) ",
		"mcPlot" : "mcPlot(model, ...) ",
		"mcPlots" : "mcPlots(model, terms = ~., layout = NULL, ask, overlaid = TRUE, ...) ",
		"mmp" : "mmp(model, ...) ",
		"mmps" : "mmps(model, terms = ~., fitted = TRUE, layout = NULL, ask, main, groups, key = TRUE, ...) ",
		"ncv.test" : "ncv.test(...) ",
		"ncvTest" : "ncvTest(model, ...) ",
		"nextBoot" : "nextBoot(object, sample) ",
		"outlier.test" : "outlier.test(...) ",
		"outlierTest" : "outlierTest(model, ...) ",
		"panel.car" : "panel.car(x, y, col, pch, cex = 1, span = 0.5, lwd = 2, reg.line = lm, lowess.line = TRUE, ...) ",
		"powerTransform" : "powerTransform(object, ...) ",
		"printHypothesis" : "printHypothesis(L, rhs, cnames) ",
		"probabilityAxis" : "probabilityAxis(scale = c(\"logit\", \"probit\"), side = c(\"right\", \"above\", \"left\", \"below\"), at, lead.digits = 1, grid = FALSE, grid.lty = 2, grid.col = gray(0.5), axis.title = \"Probability\", interval = 0.1, cex = 1, las = par(\"las\")) ",
		"qq.plot" : "qq.plot(...) ",
		"qqp" : "qqp(...) ",
		"qqPlot" : "qqPlot(x, ...) ",
		"quantregLine" : "quantregLine(x, y, col, log.x, log.y, spread = FALSE, smoother.args, draw = TRUE, offset = 0) ",
		"recode" : "recode(var, recodes, as.factor.result, as.numeric.result = TRUE, levels) ",
		"Recode" : "Recode(...) ",
		"regLine" : "regLine(mod, col = palette()[2], lwd = 2, lty = 1, ...) ",
		"residualPlot" : "residualPlot(model, ...) ",
		"residualPlots" : "residualPlots(model, ...) ",
		"scatter3d" : "scatter3d(x, ...) ",
		"scatterplot" : "scatterplot(x, ...) ",
		"scatterplot.matrix" : "scatterplot.matrix(...) ",
		"scatterplotMatrix" : "scatterplotMatrix(x, ...) ",
		"showLabels" : "showLabels(x, y, labels = NULL, id.method = \"identify\", id.n = length(x), id.cex = 1, id.col = palette()[1], id.location = \"lr\", ...) ",
		"sigmaHat" : "sigmaHat(object) ",
		"skewPower" : "skewPower(U, lambda, jacobian.adjusted = FALSE, gamma) ",
		"slp" : "slp(...) ",
		"some" : "some(x, ...) ",
		"sp" : "sp(x, ...) ",
		"spm" : "spm(x, ...) ",
		"spread.level.plot" : "spread.level.plot(...) ",
		"spreadLevelPlot" : "spreadLevelPlot(x, ...) ",
		"subsets" : "subsets(object, ...) ",
		"symbox" : "symbox(x, ...) ",
		"testTransform" : "testTransform(object, lambda) ",
		"vif" : "vif(mod, ...) ",
		"wcrossprod" : "wcrossprod(x, y, w) ",
		"which.names" : "which.names(names, object) ",
		"whichNames" : "whichNames(...) ",
		"yjPower" : "yjPower(U, lambda, jacobian.adjusted = FALSE) ",
		"yjPowerAxis" : "yjPowerAxis(power, side = c(\"right\", \"above\", \"left\", \"below\"), at, lead.digits = 1, n.ticks, grid = FALSE, grid.col = gray(0.5), grid.lty = 2, axis.title = \"Untransformed Data\", cex = 1, las = par(\"las\")) "
	}
}