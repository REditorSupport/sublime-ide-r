{
	"objects" : [
		"adist",
		"alarm",
		"apropos",
		"aregexec",
		"argsAnywhere",
		"as.person",
		"as.personList",
		"as.relistable",
		"as.roman",
		"aspell",
		"aspell_package_C_files",
		"aspell_package_R_files",
		"aspell_package_Rd_files",
		"aspell_package_vignettes",
		"aspell_write_personal_dictionary_file",
		"assignInMyNamespace",
		"assignInNamespace",
		"available.packages",
		"bibentry",
		"browseEnv",
		"browseURL",
		"browseVignettes",
		"bug.report",
		"capture.output",
		"changedFiles",
		"checkCRAN",
		"chooseBioCmirror",
		"chooseCRANmirror",
		"citation",
		"cite",
		"citeNatbib",
		"citEntry",
		"citFooter",
		"citHeader",
		"close.socket",
		"combn",
		"compareVersion",
		"contrib.url",
		"count.fields",
		"CRAN.packages",
		"create.post",
		"data",
		"data.entry",
		"dataentry",
		"de",
		"de.ncols",
		"de.restore",
		"de.setup",
		"debugger",
		"demo",
		"download.file",
		"download.packages",
		"dump.frames",
		"edit",
		"emacs",
		"example",
		"file_test",
		"file.edit",
		"fileSnapshot",
		"find",
		"findLineNum",
		"fix",
		"fixInNamespace",
		"flush.console",
		"formatOL",
		"formatUL",
		"getAnywhere",
		"getCRANmirrors",
		"getFromNamespace",
		"getParseData",
		"getParseText",
		"getS3method",
		"getSrcDirectory",
		"getSrcFilename",
		"getSrcLocation",
		"getSrcref",
		"getTxtProgressBar",
		"glob2rx",
		"globalVariables",
		"head",
		"head.matrix",
		"help",
		"help.request",
		"help.search",
		"help.start",
		"history",
		"hsearch_db",
		"hsearch_db_concepts",
		"hsearch_db_keywords",
		"install.packages",
		"installed.packages",
		"is.relistable",
		"isS3method",
		"limitedLabels",
		"loadhistory",
		"localeToCharset",
		"ls.str",
		"lsf.str",
		"maintainer",
		"make.packages.html",
		"make.socket",
		"makeRweaveLatexCodeRunner",
		"memory.limit",
		"memory.size",
		"menu",
		"methods",
		"mirror2html",
		"modifyList",
		"new.packages",
		"news",
		"nsl",
		"object.size",
		"old.packages",
		"package.skeleton",
		"packageDescription",
		"packageName",
		"packageStatus",
		"packageVersion",
		"page",
		"person",
		"personList",
		"pico",
		"process.events",
		"prompt",
		"promptData",
		"promptImport",
		"promptPackage",
		"rc.getOption",
		"rc.options",
		"rc.settings",
		"rc.status",
		"read.csv",
		"read.csv2",
		"read.delim",
		"read.delim2",
		"read.DIF",
		"read.fortran",
		"read.fwf",
		"read.socket",
		"read.table",
		"readCitationFile",
		"recover",
		"relist",
		"remove.packages",
		"removeSource",
		"Rprof",
		"Rprofmem",
		"RShowDoc",
		"RSiteSearch",
		"rtags",
		"Rtangle",
		"RtangleSetup",
		"RtangleWritedoc",
		"RweaveChunkPrefix",
		"RweaveEvalWithOpt",
		"RweaveLatex",
		"RweaveLatexFinish",
		"RweaveLatexOptions",
		"RweaveLatexSetup",
		"RweaveLatexWritedoc",
		"RweaveTryStop",
		"savehistory",
		"select.list",
		"sessionInfo",
		"setBreakpoint",
		"setRepositories",
		"setTxtProgressBar",
		"stack",
		"Stangle",
		"str",
		"strOptions",
		"summaryRprof",
		"suppressForeignCheck",
		"Sweave",
		"SweaveHooks",
		"SweaveSyntaxLatex",
		"SweaveSyntaxNoweb",
		"SweaveSyntConv",
		"tail",
		"tail.matrix",
		"tar",
		"timestamp",
		"toBibtex",
		"toLatex",
		"txtProgressBar",
		"type.convert",
		"unstack",
		"untar",
		"unzip",
		"update.packages",
		"update.packageStatus",
		"upgrade",
		"url.show",
		"URLdecode",
		"URLencode",
		"vi",
		"View",
		"vignette",
		"write.csv",
		"write.csv2",
		"write.socket",
		"write.table",
		"xedit",
		"xemacs",
		"zip"
	],
	"methods" : {
		"adist" : "adist(x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE, partial = !fixed, ignore.case = FALSE, useBytes = FALSE) ",
		"alarm" : "alarm() ",
		"apropos" : "apropos(what, where = FALSE, ignore.case = TRUE, mode = \"any\") ",
		"aregexec" : "aregexec(pattern, text, max.distance = 0.1, costs = NULL, ignore.case = FALSE, fixed = FALSE, useBytes = FALSE) ",
		"argsAnywhere" : "argsAnywhere(x) ",
		"as.person" : "as.person(x) ",
		"as.personList" : "as.personList(x) ",
		"as.relistable" : "as.relistable(x) ",
		"as.roman" : "as.roman(x) ",
		"aspell" : "aspell(files, filter, control = list(), encoding = \"unknown\", program = NULL, dictionaries = character()) ",
		"aspell_package_C_files" : "aspell_package_C_files(dir, ignore = character(), control = list(), program = NULL, dictionaries = character()) ",
		"aspell_package_R_files" : "aspell_package_R_files(dir, ignore = character(), control = list(), program = NULL, dictionaries = character()) ",
		"aspell_package_Rd_files" : "aspell_package_Rd_files(dir, drop = c(\"\\\\author\", \"\\\\references\"), control = list(), program = NULL, dictionaries = character()) ",
		"aspell_package_vignettes" : "aspell_package_vignettes(dir, control = list(), program = NULL, dictionaries = character()) ",
		"aspell_write_personal_dictionary_file" : "aspell_write_personal_dictionary_file(x, out, language = \"en\", program = NULL) ",
		"assignInMyNamespace" : "assignInMyNamespace(x, value) ",
		"assignInNamespace" : "assignInNamespace(x, value, ns, pos = -1, envir = as.environment(pos)) ",
		"available.packages" : "available.packages(contriburl = contrib.url(repos, type), method, fields = NULL, type = getOption(\"pkgType\"), filters = NULL, repos = getOption(\"repos\")) ",
		"bibentry" : "bibentry(bibtype, textVersion = NULL, header = NULL, footer = NULL, key = NULL, ..., other = list(), mheader = NULL, mfooter = NULL) ",
		"browseEnv" : "browseEnv(envir = .GlobalEnv, pattern, excludepatt = \"^last\\\\.warning\", html = .Platform$GUI != \"AQUA\", expanded = TRUE, properties = NULL, main = NULL, debugMe = FALSE) ",
		"browseURL" : "browseURL(url, browser = getOption(\"browser\"), encodeIfNeeded = FALSE) ",
		"browseVignettes" : "browseVignettes(package = NULL, lib.loc = NULL, all = TRUE) ",
		"bug.report" : "bug.report(subject = \"\", address, file = \"R.bug.report\", package = NULL, lib.loc = NULL, ...) ",
		"capture.output" : "capture.output(..., file = NULL, append = FALSE, type = c(\"output\", \"message\"), split = FALSE) ",
		"changedFiles" : "changedFiles(before, after, path = before$path, timestamp = before$timestamp, check.file.info = c(\"size\", \"isdir\", \"mode\", \"mtime\"), md5sum = before$md5sum, digest = before$digest, full.names = before$full.names, ...) ",
		"checkCRAN" : "checkCRAN(method) ",
		"chooseBioCmirror" : "chooseBioCmirror(graphics = getOption(\"menu.graphics\"), ind = NULL, useHTTPS = getOption(\"useHTTPS\", TRUE), local.only = FALSE) ",
		"chooseCRANmirror" : "chooseCRANmirror(graphics = getOption(\"menu.graphics\"), ind = NULL, useHTTPS = getOption(\"useHTTPS\", TRUE), local.only = FALSE) ",
		"citation" : "citation(package = \"base\", lib.loc = NULL, auto = NULL) ",
		"cite" : "cite(keys, bib, ...) ",
		"citeNatbib" : "citeNatbib(keys, bib, textual = FALSE, before = NULL, after = NULL, mode = c(\"authoryear\", \"numbers\", \"super\"), abbreviate = TRUE, longnamesfirst = TRUE, bibpunct = c(\"(\", \")\", \";\", \"a\", \"\",     \",\"), previous) ",
		"citEntry" : "citEntry(entry, textVersion, header = NULL, footer = NULL, ...) ",
		"citFooter" : "citFooter(...) ",
		"citHeader" : "citHeader(...) ",
		"close.socket" : "close.socket(socket, ...) ",
		"combn" : "combn(x, m, FUN = NULL, simplify = TRUE, ...) ",
		"compareVersion" : "compareVersion(a, b) ",
		"contrib.url" : "contrib.url(repos, type = getOption(\"pkgType\")) ",
		"count.fields" : "count.fields(file, sep = \"\", quote = \"\\\"'\", skip = 0, blank.lines.skip = TRUE, comment.char = \"#\") ",
		"CRAN.packages" : "CRAN.packages(CRAN = getOption(\"repos\"), method, contriburl = contrib.url(CRAN)) ",
		"create.post" : "create.post(instructions = character(), description = \"post\", subject = \"\", method = getOption(\"mailer\"), address = \"the relevant mailing list\", ccaddress = getOption(\"ccaddress\", \"\"), filename = \"R.post\", info = character()) ",
		"data" : "data(..., list = character(), package = NULL, lib.loc = NULL, verbose = getOption(\"verbose\"), envir = .GlobalEnv) ",
		"data.entry" : "data.entry(..., Modes = NULL, Names = NULL) ",
		"dataentry" : "dataentry(data, modes) ",
		"de" : "de(..., Modes = list(), Names = NULL) ",
		"de.ncols" : "de.ncols(inlist) ",
		"de.restore" : "de.restore(inlist, ncols, coltypes, argnames, args) ",
		"de.setup" : "de.setup(ilist, list.names, incols) ",
		"debugger" : "debugger(dump = last.dump) ",
		"demo" : "demo(topic, package = NULL, lib.loc = NULL, character.only = FALSE, verbose = getOption(\"verbose\"), echo = TRUE, ask = getOption(\"demo.ask\"), encoding = getOption(\"encoding\")) ",
		"download.file" : "download.file(url, destfile, method, quiet = FALSE, mode = \"w\", cacheOK = TRUE, extra = getOption(\"download.file.extra\")) ",
		"download.packages" : "download.packages(pkgs, destdir, available = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, type), method, type = getOption(\"pkgType\"), ...) ",
		"dump.frames" : "dump.frames(dumpto = \"last.dump\", to.file = FALSE) ",
		"edit" : "edit(name, ...) ",
		"emacs" : "emacs(name = NULL, file = \"\") ",
		"example" : "example(topic, package = NULL, lib.loc = NULL, character.only = FALSE, give.lines = FALSE, local = FALSE, echo = TRUE, verbose = getOption(\"verbose\"), setRNG = FALSE, ask = getOption(\"example.ask\"), prompt.prefix = abbreviate(topic,     6), run.dontrun = FALSE, run.donttest = interactive()) ",
		"file_test" : "file_test(op, x, y) ",
		"file.edit" : "file.edit(..., title = file, editor = getOption(\"editor\"), fileEncoding = \"\") ",
		"fileSnapshot" : "fileSnapshot(path = \".\", file.info = TRUE, timestamp = NULL, md5sum = FALSE, digest = NULL, full.names = length(path) > 1, ...) ",
		"find" : "find(what, mode = \"any\", numeric = FALSE, simple.words = TRUE) ",
		"findLineNum" : "findLineNum(srcfile, line, nameonly = TRUE, envir = parent.frame(), lastenv) ",
		"fix" : "fix(x, ...) ",
		"fixInNamespace" : "fixInNamespace(x, ns, pos = -1, envir = as.environment(pos), ...) ",
		"flush.console" : "flush.console() ",
		"formatOL" : "formatOL(x, type = \"arabic\", offset = 0, start = 1, width = 0.9 * getOption(\"width\")) ",
		"formatUL" : "formatUL(x, label = \"*\", offset = 0, width = 0.9 * getOption(\"width\")) ",
		"getAnywhere" : "getAnywhere(x) ",
		"getCRANmirrors" : "getCRANmirrors(all = FALSE, local.only = FALSE) ",
		"getFromNamespace" : "getFromNamespace(x, ns, pos = -1, envir = as.environment(pos)) ",
		"getParseData" : "getParseData(x, includeText = NA) ",
		"getParseText" : "getParseText(parseData, id) ",
		"getS3method" : "getS3method(f, class, optional = FALSE, envir = parent.frame()) ",
		"getSrcDirectory" : "getSrcDirectory(x, unique = TRUE) ",
		"getSrcFilename" : "getSrcFilename(x, full.names = FALSE, unique = TRUE) ",
		"getSrcLocation" : "getSrcLocation(x, which = c(\"line\", \"column\", \"byte\", \"parse\"), first = TRUE) ",
		"getSrcref" : "getSrcref(x) ",
		"getTxtProgressBar" : "getTxtProgressBar(pb) ",
		"glob2rx" : "glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE) ",
		"globalVariables" : "globalVariables(names, package, add = TRUE) ",
		"head" : "head(x, ...) ",
		"head.matrix" : "head.matrix(x, n = 6L, ...) ",
		"help" : "help(topic, package = NULL, lib.loc = NULL, verbose = getOption(\"verbose\"), try.all.packages = getOption(\"help.try.all.packages\"), help_type = getOption(\"help_type\")) ",
		"help.request" : "help.request(subject = \"\", address = \"r-help@R-project.org\", file = \"R.help.request\", ...) ",
		"help.search" : "help.search(pattern, fields = c(\"alias\", \"concept\", \"title\"), apropos, keyword, whatis, ignore.case = TRUE, package = NULL, lib.loc = NULL, help.db = getOption(\"help.db\"), verbose = getOption(\"verbose\"), rebuild = FALSE, agrep = NULL, use_UTF8 = FALSE, types = getOption(\"help.search.types\")) ",
		"help.start" : "help.start(update = FALSE, gui = \"irrelevant\", browser = getOption(\"browser\"), remote = NULL) ",
		"history" : "history(max.show = 25, reverse = FALSE, pattern, ...) ",
		"hsearch_db" : "hsearch_db(package = NULL, lib.loc = NULL, types = getOption(\"help.search.types\"), verbose = getOption(\"verbose\"), rebuild = FALSE, use_UTF8 = FALSE) ",
		"hsearch_db_concepts" : "hsearch_db_concepts(db = hsearch_db()) ",
		"hsearch_db_keywords" : "hsearch_db_keywords(db = hsearch_db()) ",
		"install.packages" : "install.packages(pkgs, lib, repos = getOption(\"repos\"), contriburl = contrib.url(repos, type), method, available = NULL, destdir = NULL, dependencies = NA, type = getOption(\"pkgType\"), configure.args = getOption(\"configure.args\"), configure.vars = getOption(\"configure.vars\"), clean = FALSE, Ncpus = getOption(\"Ncpus\", 1L), verbose = getOption(\"verbose\"), libs_only = FALSE, INSTALL_opts, quiet = FALSE, keep_outputs = FALSE, ...) ",
		"installed.packages" : "installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, subarch = .Platform$r_arch) ",
		"is.relistable" : "is.relistable(x) ",
		"isS3method" : "isS3method(method, f, class, envir = parent.frame()) ",
		"limitedLabels" : "limitedLabels(value, maxwidth = getOption(\"width\") - 5L) ",
		"loadhistory" : "loadhistory(file = \".Rhistory\") ",
		"localeToCharset" : "localeToCharset(locale = Sys.getlocale(\"LC_CTYPE\")) ",
		"ls.str" : "ls.str(pos = -1, name, envir, all.names = FALSE, pattern, mode = \"any\") ",
		"lsf.str" : "lsf.str(pos = -1, envir, ...) ",
		"maintainer" : "maintainer(pkg) ",
		"make.packages.html" : "make.packages.html(lib.loc = .libPaths(), temp = FALSE, verbose = TRUE, docdir = R.home(\"doc\")) ",
		"make.socket" : "make.socket(host = \"localhost\", port, fail = TRUE, server = FALSE) ",
		"makeRweaveLatexCodeRunner" : "makeRweaveLatexCodeRunner(evalFunc = RweaveEvalWithOpt) ",
		"memory.limit" : "memory.limit(size = NA) ",
		"memory.size" : "memory.size(max = FALSE) ",
		"menu" : "menu(choices, graphics = FALSE, title = NULL) ",
		"methods" : "methods(generic.function, class) ",
		"mirror2html" : "mirror2html(mirrors = NULL, file = \"mirrors.html\", head = \"mirrors-head.html\", foot = \"mirrors-foot.html\") ",
		"modifyList" : "modifyList(x, val, keep.null = FALSE) ",
		"new.packages" : "new.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, type), instPkgs = installed.packages(lib.loc = lib.loc), method, available = NULL, ask = FALSE, ..., type = getOption(\"pkgType\")) ",
		"news" : "news(query, package = \"R\", lib.loc = NULL, format = NULL, reader = NULL, db = NULL) ",
		"nsl" : "nsl(hostname) ",
		"object.size" : "object.size(x) ",
		"old.packages" : "old.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, type), instPkgs = installed.packages(lib.loc = lib.loc), method, available = NULL, checkBuilt = FALSE, type = getOption(\"pkgType\")) ",
		"package.skeleton" : "package.skeleton(name = \"anRpackage\", list = character(), environment = .GlobalEnv, path = \".\", force = FALSE, code_files = character()) ",
		"packageDescription" : "packageDescription(pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = \"\") ",
		"packageName" : "packageName(env = parent.frame()) ",
		"packageStatus" : "packageStatus(lib.loc = NULL, repositories = NULL, method, type = getOption(\"pkgType\")) ",
		"packageVersion" : "packageVersion(pkg, lib.loc = NULL) ",
		"page" : "page(x, method = c(\"dput\", \"print\"), ...) ",
		"person" : "person(given = NULL, family = NULL, middle = NULL, email = NULL, role = NULL, comment = NULL, first = NULL, last = NULL) ",
		"personList" : "personList(...) ",
		"pico" : "pico(name = NULL, file = \"\") ",
		"process.events" : "process.events() ",
		"prompt" : "prompt(object, filename = NULL, name = NULL, ...) ",
		"promptData" : "promptData(object, filename = NULL, name = NULL) ",
		"promptImport" : "promptImport(object, filename = NULL, name = NULL, importedFrom = NULL, importPage = name, ...) ",
		"promptPackage" : "promptPackage(package, lib.loc = NULL, filename = NULL, name = NULL, final = FALSE) ",
		"rc.getOption" : "rc.getOption(name) ",
		"rc.options" : "rc.options(...) ",
		"rc.settings" : "rc.settings(ops, ns, args, func, ipck, S3, data, help, argdb, fuzzy, quotes, files) ",
		"rc.status" : "rc.status() ",
		"read.csv" : "read.csv(file, header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\", fill = TRUE, comment.char = \"\", ...) ",
		"read.csv2" : "read.csv2(file, header = TRUE, sep = \";\", quote = \"\\\"\", dec = \",\", fill = TRUE, comment.char = \"\", ...) ",
		"read.delim" : "read.delim(file, header = TRUE, sep = \"\\t\", quote = \"\\\"\", dec = \".\", fill = TRUE, comment.char = \"\", ...) ",
		"read.delim2" : "read.delim2(file, header = TRUE, sep = \"\\t\", quote = \"\\\"\", dec = \",\", fill = TRUE, comment.char = \"\", ...) ",
		"read.DIF" : "read.DIF(file, header = FALSE, dec = \".\", numerals = c(\"allow.loss\", \"warn.loss\", \"no.loss\"), row.names, col.names, as.is = !stringsAsFactors, na.strings = \"NA\", colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, blank.lines.skip = TRUE, stringsAsFactors = default.stringsAsFactors(), transpose = FALSE, fileEncoding = \"\") ",
		"read.fortran" : "read.fortran(file, format, ..., as.is = TRUE, colClasses = NA) ",
		"read.fwf" : "read.fwf(file, widths, header = FALSE, sep = \"\\t\", skip = 0L, row.names, col.names, n = -1L, buffersize = 2000, fileEncoding = \"\", ...) ",
		"read.socket" : "read.socket(socket, maxlen = 256L, loop = FALSE) ",
		"read.table" : "read.table(file, header = FALSE, sep = \"\", quote = \"\\\"'\", dec = \".\", numerals = c(\"allow.loss\", \"warn.loss\", \"no.loss\"), row.names, col.names, as.is = !stringsAsFactors, na.strings = \"NA\", colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, comment.char = \"#\", allowEscapes = FALSE, flush = FALSE, stringsAsFactors = default.stringsAsFactors(), fileEncoding = \"\", encoding = \"unknown\", text, skipNul = FALSE) ",
		"readCitationFile" : "readCitationFile(file, meta = NULL) ",
		"recover" : "recover() ",
		"relist" : "relist(flesh, skeleton = attr(flesh, \"skeleton\")) ",
		"remove.packages" : "remove.packages(pkgs, lib) ",
		"removeSource" : "removeSource(fn) ",
		"Rprof" : "Rprof(filename = \"Rprof.out\", append = FALSE, interval = 0.02, memory.profiling = FALSE, gc.profiling = FALSE, line.profiling = FALSE, numfiles = 100L, bufsize = 10000L) ",
		"Rprofmem" : "Rprofmem(filename = \"Rprofmem.out\", append = FALSE, threshold = 0) ",
		"RShowDoc" : "RShowDoc(what, type = c(\"pdf\", \"html\", \"txt\"), package) ",
		"RSiteSearch" : "RSiteSearch(string, restrict = c(\"functions\", \"vignettes\", \"views\"), format = c(\"normal\", \"short\"), sortby = c(\"score\", \"date:late\",     \"date:early\", \"subject\", \"subject:descending\", \"from\",     \"from:descending\", \"size\", \"size:descending\"), matchesPerPage = 20) ",
		"rtags" : "rtags(path = \".\", pattern = \"\\\\.[RrSs]$\", recursive = FALSE, src = list.files(path = path, pattern = pattern, full.names = TRUE,     recursive = recursive), keep.re = NULL, ofile = \"\", append = FALSE, verbose = getOption(\"verbose\")) ",
		"Rtangle" : "Rtangle() ",
		"RtangleSetup" : "RtangleSetup(file, syntax, output = NULL, annotate = TRUE, split = FALSE, quiet = FALSE, ...) ",
		"RtangleWritedoc" : "RtangleWritedoc(object, chunk) ",
		"RweaveChunkPrefix" : "RweaveChunkPrefix(options) ",
		"RweaveEvalWithOpt" : "RweaveEvalWithOpt(expr, options) ",
		"RweaveLatex" : "RweaveLatex() ",
		"RweaveLatexFinish" : "RweaveLatexFinish(object, error = FALSE) ",
		"RweaveLatexOptions" : "RweaveLatexOptions(options) ",
		"RweaveLatexSetup" : "RweaveLatexSetup(file, syntax, output = NULL, quiet = FALSE, debug = FALSE, stylepath, ...) ",
		"RweaveLatexWritedoc" : "RweaveLatexWritedoc(object, chunk) ",
		"RweaveTryStop" : "RweaveTryStop(err, options) ",
		"savehistory" : "savehistory(file = \".Rhistory\") ",
		"select.list" : "select.list(choices, preselect = NULL, multiple = FALSE, title = NULL, graphics = getOption(\"menu.graphics\")) ",
		"sessionInfo" : "sessionInfo(package = NULL) ",
		"setBreakpoint" : "setBreakpoint(srcfile, line, nameonly = TRUE, envir = parent.frame(), lastenv, verbose = TRUE, tracer, print = FALSE, clear = FALSE, ...) ",
		"setRepositories" : "setRepositories(graphics = getOption(\"menu.graphics\"), ind = NULL, addURLs = character()) ",
		"setTxtProgressBar" : "setTxtProgressBar(pb, value, title = NULL, label = NULL) ",
		"stack" : "stack(x, ...) ",
		"Stangle" : "Stangle(file, driver = Rtangle(), syntax = getOption(\"SweaveSyntax\"), encoding = \"\", ...) ",
		"str" : "str(object, ...) ",
		"strOptions" : "strOptions(strict.width = \"no\", digits.d = 3, vec.len = 4, formatNum = function(x, ...) format(x, trim = TRUE, drop0trailing = TRUE, ...)) ",
		"summaryRprof" : "summaryRprof(filename = \"Rprof.out\", chunksize = 5000, memory = c(\"none\", \"both\", \"tseries\", \"stats\"), lines = c(\"hide\", \"show\", \"both\"), index = 2, diff = TRUE, exclude = NULL, basenames = 1) ",
		"suppressForeignCheck" : "suppressForeignCheck(names, package, add = TRUE) ",
		"Sweave" : "Sweave(file, driver = RweaveLatex(), syntax = getOption(\"SweaveSyntax\"), encoding = \"\", ...) ",
		"SweaveHooks" : "SweaveHooks(options, run = FALSE, envir = .GlobalEnv) ",
		"SweaveSyntConv" : "SweaveSyntConv(file, syntax, output = NULL) ",
		"tail" : "tail(x, ...) ",
		"tail.matrix" : "tail.matrix(x, n = 6L, addrownums = TRUE, ...) ",
		"tar" : "tar(tarfile, files = NULL, compression = c(\"none\", \"gzip\", \"bzip2\", \"xz\"), compression_level = 6, tar = Sys.getenv(\"tar\"), extra_flags = \"\") ",
		"timestamp" : "timestamp(stamp = date(), prefix = \"##------ \", suffix = \" ------##\", quiet = FALSE) ",
		"toBibtex" : "toBibtex(object, ...) ",
		"toLatex" : "toLatex(object, ...) ",
		"txtProgressBar" : "txtProgressBar(min = 0, max = 1, initial = 0, char = \"=\", width = NA, title, label, style = 1, file = \"\") ",
		"type.convert" : "type.convert(x, na.strings = \"NA\", as.is = FALSE, dec = \".\", numerals = c(\"allow.loss\", \"warn.loss\", \"no.loss\")) ",
		"unstack" : "unstack(x, ...) ",
		"untar" : "untar(tarfile, files = NULL, list = FALSE, exdir = \".\", compressed = NA, extras = NULL, verbose = FALSE, restore_times = TRUE, tar = Sys.getenv(\"TAR\")) ",
		"unzip" : "unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE, junkpaths = FALSE, exdir = \".\", unzip = \"internal\", setTimes = FALSE) ",
		"update.packages" : "update.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, type), method, instlib = NULL, ask = TRUE, available = NULL, oldPkgs = NULL, ..., checkBuilt = FALSE, type = getOption(\"pkgType\")) ",
		"update.packageStatus" : "update.packageStatus(object, lib.loc = levels(object$inst$LibPath), repositories = levels(object$avail$Repository), ...) ",
		"upgrade" : "upgrade(object, ...) ",
		"url.show" : "url.show(url, title = url, file = tempfile(), delete.file = TRUE, method, ...) ",
		"URLdecode" : "URLdecode(URL) ",
		"URLencode" : "URLencode(URL, reserved = FALSE, repeated = FALSE) ",
		"vi" : "vi(name = NULL, file = \"\") ",
		"View" : "View(x, title) ",
		"vignette" : "vignette(topic, package = NULL, lib.loc = NULL, all = TRUE) ",
		"write.csv" : "write.csv(...) ",
		"write.csv2" : "write.csv2(...) ",
		"write.socket" : "write.socket(socket, string) ",
		"write.table" : "write.table(x, file = \"\", append = FALSE, quote = TRUE, sep = \" \", eol = \"\\n\", na = \"NA\", dec = \".\", row.names = TRUE, col.names = TRUE, qmethod = c(\"escape\", \"double\"), fileEncoding = \"\") ",
		"xedit" : "xedit(name = NULL, file = \"\") ",
		"xemacs" : "xemacs(name = NULL, file = \"\") ",
		"zip" : "zip(zipfile, files, flags = \"-r9X\", extras = \"\", zip = Sys.getenv(\"R_ZIPCMD\", \"zip\")) "
	}
}