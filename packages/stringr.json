{
	"objects" : [
		"boundary",
		"coll",
		"fixed",
		"fruit",
		"ignore.case",
		"invert_match",
		"perl",
		"regex",
		"sentences",
		"str_c",
		"str_conv",
		"str_count",
		"str_detect",
		"str_dup",
		"str_extract",
		"str_extract_all",
		"str_interp",
		"str_join",
		"str_length",
		"str_locate",
		"str_locate_all",
		"str_match",
		"str_match_all",
		"str_order",
		"str_pad",
		"str_replace",
		"str_replace_all",
		"str_replace_na",
		"str_sort",
		"str_split",
		"str_split_fixed",
		"str_sub",
		"str_subset",
		"str_to_lower",
		"str_to_title",
		"str_to_upper",
		"str_trim",
		"str_trunc",
		"str_view",
		"str_view_all",
		"str_wrap",
		"word",
		"words"
	],
	"methods" : {
		"boundary" : "boundary(type = c(\"character\", \"line_break\", \"sentence\", \"word\"), skip_word_none = NA, ...) ",
		"coll" : "coll(pattern, ignore_case = FALSE, locale = NULL, ...) ",
		"fixed" : "fixed(pattern, ignore_case = FALSE) ",
		"ignore.case" : "ignore.case(string) ",
		"invert_match" : "invert_match(loc) ",
		"perl" : "perl(pattern) ",
		"regex" : "regex(pattern, ignore_case = FALSE, multiline = FALSE, comments = FALSE, dotall = FALSE, ...) ",
		"str_c" : "str_c(..., sep = \"\", collapse = NULL) ",
		"str_conv" : "str_conv(string, encoding) ",
		"str_count" : "str_count(string, pattern = \"\") ",
		"str_detect" : "str_detect(string, pattern) ",
		"str_dup" : "str_dup(string, times) ",
		"str_extract" : "str_extract(string, pattern) ",
		"str_extract_all" : "str_extract_all(string, pattern, simplify = FALSE) ",
		"str_interp" : "str_interp(string, env = parent.frame()) ",
		"str_join" : "str_join(..., sep = \"\", collapse = NULL) ",
		"str_length" : "str_length(string) ",
		"str_locate" : "str_locate(string, pattern) ",
		"str_locate_all" : "str_locate_all(string, pattern) ",
		"str_match" : "str_match(string, pattern) ",
		"str_match_all" : "str_match_all(string, pattern) ",
		"str_order" : "str_order(x, decreasing = FALSE, na_last = TRUE, locale = \"\", ...) ",
		"str_pad" : "str_pad(string, width, side = c(\"left\", \"right\", \"both\"), pad = \" \") ",
		"str_replace" : "str_replace(string, pattern, replacement) ",
		"str_replace_all" : "str_replace_all(string, pattern, replacement) ",
		"str_replace_na" : "str_replace_na(string, replacement = \"NA\") ",
		"str_sort" : "str_sort(x, decreasing = FALSE, na_last = TRUE, locale = \"\", ...) ",
		"str_split" : "str_split(string, pattern, n = Inf, simplify = FALSE) ",
		"str_split_fixed" : "str_split_fixed(string, pattern, n) ",
		"str_sub" : "str_sub(string, start = 1L, end = -1L) ",
		"str_subset" : "str_subset(string, pattern) ",
		"str_to_lower" : "str_to_lower(string, locale = \"\") ",
		"str_to_title" : "str_to_title(string, locale = \"\") ",
		"str_to_upper" : "str_to_upper(string, locale = \"\") ",
		"str_trim" : "str_trim(string, side = c(\"both\", \"left\", \"right\")) ",
		"str_trunc" : "str_trunc(string, width, side = c(\"right\", \"left\", \"center\"), ellipsis = \"...\") ",
		"str_view" : "str_view(string, pattern, match = NA) ",
		"str_view_all" : "str_view_all(string, pattern, match = NA) ",
		"str_wrap" : "str_wrap(string, width = 80, indent = 0, exdent = 0) ",
		"word" : "word(string, start = 1L, end = start, sep = fixed(\" \")) "
	}
}