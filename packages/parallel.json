{
	"objects" : [
		"clusterApply",
		"clusterApplyLB",
		"clusterCall",
		"clusterEvalQ",
		"clusterExport",
		"clusterMap",
		"clusterSetRNGStream",
		"clusterSplit",
		"detectCores",
		"makeCluster",
		"makeForkCluster",
		"makePSOCKcluster",
		"mc.reset.stream",
		"mcaffinity",
		"mccollect",
		"mclapply",
		"mcMap",
		"mcmapply",
		"mcparallel",
		"nextRNGStream",
		"nextRNGSubStream",
		"parApply",
		"parCapply",
		"parLapply",
		"parLapplyLB",
		"parRapply",
		"parSapply",
		"parSapplyLB",
		"pvec",
		"setDefaultCluster",
		"splitIndices",
		"stopCluster"
	],
	"methods" : {
		"clusterApply" : "clusterApply(cl = NULL, x, fun, ...) ",
		"clusterApplyLB" : "clusterApplyLB(cl = NULL, x, fun, ...) ",
		"clusterCall" : "clusterCall(cl = NULL, fun, ...) ",
		"clusterEvalQ" : "clusterEvalQ(cl = NULL, expr) ",
		"clusterExport" : "clusterExport(cl = NULL, varlist, envir = .GlobalEnv) ",
		"clusterMap" : "clusterMap(cl = NULL, fun, ..., MoreArgs = NULL, RECYCLE = TRUE, SIMPLIFY = FALSE, USE.NAMES = TRUE, .scheduling = c(\"static\",     \"dynamic\")) ",
		"clusterSetRNGStream" : "clusterSetRNGStream(cl = NULL, iseed = NULL) ",
		"clusterSplit" : "clusterSplit(cl = NULL, seq) ",
		"detectCores" : "detectCores(all.tests = FALSE, logical = TRUE) ",
		"makeCluster" : "makeCluster(spec, type = getClusterOption(\"type\"), ...) ",
		"makeForkCluster" : "makeForkCluster(nnodes = getOption(\"mc.cores\", 2L), ...) ",
		"makePSOCKcluster" : "makePSOCKcluster(names, ...) ",
		"mc.reset.stream" : "mc.reset.stream() ",
		"mcaffinity" : "mcaffinity(affinity = NULL) ",
		"mccollect" : "mccollect(jobs, wait = TRUE, timeout = 0, intermediate = FALSE) ",
		"mclapply" : "mclapply(X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE, mc.silent = FALSE, mc.cores = getOption(\"mc.cores\", 2L), mc.cleanup = TRUE, mc.allow.recursive = TRUE) ",
		"mcMap" : "mcMap(f, ...) ",
		"mcmapply" : "mcmapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE, mc.preschedule = TRUE, mc.set.seed = TRUE, mc.silent = FALSE, mc.cores = getOption(\"mc.cores\", 2L), mc.cleanup = TRUE) ",
		"mcparallel" : "mcparallel(expr, name, mc.set.seed = TRUE, silent = FALSE, mc.affinity = NULL, mc.interactive = FALSE, detached = FALSE) ",
		"nextRNGStream" : "nextRNGStream(seed) ",
		"nextRNGSubStream" : "nextRNGSubStream(seed) ",
		"parApply" : "parApply(cl = NULL, X, MARGIN, FUN, ...) ",
		"parCapply" : "parCapply(cl = NULL, x, FUN, ...) ",
		"parLapply" : "parLapply(cl = NULL, X, fun, ...) ",
		"parLapplyLB" : "parLapplyLB(cl = NULL, X, fun, ...) ",
		"parRapply" : "parRapply(cl = NULL, x, FUN, ...) ",
		"parSapply" : "parSapply(cl = NULL, X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) ",
		"parSapplyLB" : "parSapplyLB(cl = NULL, X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) ",
		"pvec" : "pvec(v, FUN, ..., mc.set.seed = TRUE, mc.silent = FALSE, mc.cores = getOption(\"mc.cores\", 2L), mc.cleanup = TRUE) ",
		"setDefaultCluster" : "setDefaultCluster(cl = NULL) ",
		"splitIndices" : "splitIndices(nx, ncl) ",
		"stopCluster" : "stopCluster(cl = NULL) "
	}
}