%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: R Markdown
file_extensions:
  - rmdown
  - rmarkdown
  - rmarkdn
  - rmd
scope: text.html.markdown.rmarkdown
variables:
  fenced_code_begin_head: '^(```{?\.?|~~~{?\.?|{%\s*highlight)\s*'
  fenced_code_begin_tail: '(?:.*?)(%?\}?)$'
  fenced_code_end: '^(```|~~~|{%\s*endhighlight\s*%})$'
contexts:
  main:
    - match: (?=^---\n$)
      push: front-matter
    - match: ""
      push: body

  front-matter:
    - match: ^---\n$
      push:
        - meta_scope: markup.raw.yaml.front-matter
        - meta_content_scope: source.yaml
        - match: ^---\s
          pop: true
        - include: scope:source.yaml
    - match: ""
      pop: true
      push: body

  body:
    - include: block
    - include: list
    - include: html-basic
    - include: link-ref-definition
    - include: paragraph

  html-comment:
    - match: <!--
      captures:
        0: punctuation.definition.comment.html
      push:
        - meta_scope: comment.block.html
        - match: '--\s*>'
          pop: true
        - match: "--"
          scope: invalid.illegal.bad-comments-or-CDATA.html

  block:
    - match: |-
        (?x)^
        (?= [ ]{,3}>.
        | ([ ]{4}|\t)(?!$)
        | [#]{1,6}\s*+
        | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
        | {{fenced_code_begin_head}}
        )
      comment: |
        We could also use an empty end match and set
                        applyEndPatternLast, but then we must be sure that the begin
                        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - match: |-
            (?x)^
            (?! [ ]{,3}>.
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | {{fenced_code_begin_head}}
            )
          pop: true
        - include: block_quote
        - include: block_raw
        - include: fenced-code
        - include: heading
        - include: separator

  block_quote:
    - match: '\G[ ]{,3}(>)(?!$)[ ]?'
      comment: |
        We terminate the block quote when seeing an empty line, a
                        separator or a line with leading > characters. The latter is
                        to “reset” the quote level for quoted lines.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - meta_scope: markup.quote.markdown
        - match: |-
            (?x)^
            (?= \s*$
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}>.
            )
          pop: true
        - match: |-
            (?x)\G
            (?= [ ]{,3}>.
            )
          push:
            - match: ^
              pop: true
            - include: block_quote
        - match: |-
            (?x)\G
            (?= ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - include: block_raw
            - include: heading
            - include: separator
            - match: ^
              pop: true
        - match: |-
            (?x)\G
            (?! $
            | [ ]{,3}>.
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - match: $|(?<=\n)
              pop: true
            - include: inline

  block_raw:
    - match: '\G([ ]{4}|\t).*$\n?'
      scope: markup.raw.block.markdown

  heading:
    - match: '\G(#{1})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.1.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
    - match: '\G(#{2})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.2.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
    - match: '\G(#{3})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.3.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
    - match: '\G(#{4})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.4.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
    - match: '\G(#{5})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.5.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
    - match: '\G(#{6})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown markup.heading.6.markdown
        - match: \s*(#*)$\n?
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline

  inline:
    - include: scope:text.html.markdown#escape
    - include: scope:text.html.markdown#ampersand
    - include: scope:text.html.markdown#bracket
    - include: rcode-inline
    - include: latex-math
    - include: scope:text.html.markdown#raw
    - include: scope:text.html.markdown#bold
    - include: scope:text.html.markdown#italic
    # - include: scope:text.html.markdown#strike
    - include: scope:text.html.markdown#line-break
    - include: scope:text.html.markdown#image-inline
    - include: scope:text.html.markdown#link-inline
    - include: scope:text.html.markdown#link-inet
    - include: scope:text.html.markdown#link-email
    - include: scope:text.html.markdown#image-ref
    - include: scope:text.html.markdown#link-ref-literal
    - include: scope:text.html.markdown#link-ref

  separator:
    - match: '\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?'
      scope: meta.separator.markdown


  list-paragraph:
    - match: '\s*([*+-])(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
    - match: '\s*(([0-9]+)\.)(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
        2: punctuation.definition.list_item.number.markdown
    - include: block_raw
    - include: fenced-code
    - include: inline

  list:
    - match: '^(?=[ ]{0,3}([*+-])\s)'
      push:
        - meta_scope: markup.list.unnumbered.markdown meta.paragraph.list.markdown
        - match: ^(?=\s*$)
          pop: true
        - include: list-paragraph
    - match: '^(?=[ ]{0,3}([0-9]+)(\.)\s)'
      push:
        - meta_scope: markup.list.numbered.markdown meta.paragraph.list.markdown
        - match: ^(?=\s*$)
          pop: true
        - include: list-paragraph


  html-basic:
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)'
      comment: Same rule but for one line disables.
      push:
        - meta_scope: meta.disable-markdown
        - match: $\n?
          pop: true
        - include: scope:text.html.basic
        - include: latex-math
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del)\b)(?!.*?</\1>)'
      comment: Markdown formatting is disabled inside block-level tags.
      push:
        - meta_scope: meta.disable-markdown
        - match: (?<=^</\1>$\n)
          pop: true
        - include: scope:text.html.basic
        - include: latex-math

  link-ref-definition:
    - match: |-
        (?x:
          \s*                 # Leading whitespace
          (\[)(.+?)(\])(:)    # Reference name
          [ \t]*              # Optional whitespace
          (<?)(\S+?)(>?)      # The url
          [ \t]*              # Optional whitespace
          (?:
              ((\().+?(\)))   # Match title in quotes…
            | ((").+?("))     # or in parens.
          )?                  # Title is optional
          \s*                 # Optional whitespace
          $
        )
      scope: meta.link.reference.def.markdown
      captures:
        1: punctuation.definition.constant.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.markdown
        8: string.other.link.description.title.markdown
        9: punctuation.definition.string.begin.markdown
        10: punctuation.definition.string.end.markdown
        11: string.other.link.description.title.markdown
        12: punctuation.definition.string.begin.markdown
        13: punctuation.definition.string.end.markdown

  paragraph:
    - match: '^(?=\S)(?![=-]{3,}(?=$))'
      push:
        - meta_scope: meta.paragraph.markdown
        - include: html-comment
        - match: '^(?:\s*$|(?=[ ]{,3}>.))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          pop: true
        - include: inline
        - include: scope:text.html.basic
        - match: '^(={3,})(?=[ \t]*$)'
          scope: markup.heading.1.markdown
          captures:
            1: punctuation.definition.heading.markdown
        - match: '^(-{3,})(?=[ \t]*$)'
          scope: markup.heading.2.markdown
          captures:
            1: punctuation.definition.heading.markdown

  fenced-code:
    - match: '{{fenced_code_begin_head}}(c){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.c
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.c
    - match: '{{fenced_code_begin_head}}(cpp){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.c++
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.c++
    - match: '{{fenced_code_begin_head}}(css){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.css
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.css
    - match: '{{fenced_code_begin_head}}(csharp){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.cs
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.cs
    - match: '{{fenced_code_begin_head}}(erlang){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.erlang
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.erlang
    - match: '{{fenced_code_begin_head}}(diff){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.diff
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.diff
    - match: '{{fenced_code_begin_head}}(go|golang){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.go
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.go
    - match: '{{fenced_code_begin_head}}(java){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.java
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.java
    - match: '{{fenced_code_begin_head}}(javascript|js){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.js
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.js
    - match: '{{fenced_code_begin_head}}(json){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.json
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.json
    - match: '{{fenced_code_begin_head}}(julia|jl){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.julia
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.julia
    - match: '{{fenced_code_begin_head}}(lua){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.lua
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.lua
    - match: '{{fenced_code_begin_head}}(md|markdown){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: text.html.markdown
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:text.html.markdown
    - match: '{{fenced_code_begin_head}}(obj(?:ective\-|)c){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.objc
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.objc
    - match: '{{fenced_code_begin_head}}(obj(?:ective\-|)c\+\+){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.objc++
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.objc++
    - match: '{{fenced_code_begin_head}}(perl){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.perl
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.perl
    - match: '{{fenced_code_begin_head}}(php){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.php
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.php
    - match: '{{fenced_code_begin_head}}(python|py){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.python
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.python
    - match: '{{fenced_code_begin_head}}(r(?=[ ,%\}]|$)){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.r
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: "R Extended.sublime-syntax"
    - match: '{{fenced_code_begin_head}}(ruby){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.ruby
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.ruby
    - match: '{{fenced_code_begin_head}}(rust){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.rust
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.rust
    - match: '{{fenced_code_begin_head}}(scala){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.scala
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.scala
    - match: '{{fenced_code_begin_head}}(sh|shell|bash){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.shell
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.shell
    - match: '{{fenced_code_begin_head}}(sql|mysql|ddl|dml){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.sql
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.sql
    - match: '{{fenced_code_begin_head}}(xml){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: text.xml
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:text.xml
    - match: '{{fenced_code_begin_head}}(yaml){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - meta_content_scope: source.yaml
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true
        - include: scope:source.yaml
    - match: '{{fenced_code_begin_head}}(\w*){{fenced_code_begin_tail}}'
      captures:
        1: punctuation.definition.fenced.markdown
        2: variable.language.fenced.markdown
        3: punctuation.definition.fenced.markdown
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: '{{fenced_code_end}}'
          captures:
            1: punctuation.definition.fenced.markdown
          pop: true

  rcode-inline:
    - match: '(`+)(r) '
      captures:
        1: punctuation.definition.raw.markdown
        2: variable.language.fenced.markdown
      push:
        - meta_scope: markup.raw.inline.markdown
        - meta_content_scope: source.r
        - match: '\1'
          scope: punctuation.definition.raw.markdown
          pop: true
        - include: "R Extended.sublime-syntax"

  latex-math:
    - match: \\\$
    - match: \$\$
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      with_prototype:
        - include: rcode-inline
      push:
        - meta_scope: text.tex.latex meta.environment.math.latex
        - include: scope:text.tex.latex#macros
        - include: scope:text.tex.latex#math-content
        - match: \$\$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
    - match: |-
        (?x)
        (\$)(?=\S)
        (?=
          (?:
            \\\\
            |\\\$
            |[^\$]
          )*?
          \S\$(?:[^a-zA-Z0-9]|$)
        )
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      with_prototype:
        - include: rcode-inline
      push:
        - meta_scope: text.tex.latex meta.environment.math.latex
        - include: scope:text.tex.latex#macros
        - include: scope:text.tex.latex#math-content
        - match: \$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
